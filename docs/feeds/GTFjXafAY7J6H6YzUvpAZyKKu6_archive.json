{"id":"GTFjXafAY7J6H6YzUvpAZyKKu6","title":"Threat Intelligence","displayTitle":"Threat Intelligence","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":19,"items":[{"title":"ISC Stormcast For Friday, October 3rd, 2025 https://isc.sans.edu/podcastdetail/9640, (Fri, Oct 3rd)","url":"https://isc.sans.edu/diary/rss/32342","date":1759456802,"author":"","guid":353,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Your Meta AI conversations may come back as ads in your feed","url":"https://www.malwarebytes.com/blog/news/2025/10/your-meta-ai-conversations-may-come-back-as-ads-in-your-feed","date":1759427736,"author":"","guid":113,"unread":true,"content":"<p>Meta has announced that conversations with its AI assistant will soon be used for targeted advertising. If you’re the kind of person that notices ads for products just after you spoke about them, you won’t be happy about this update.</p><p>Meta AI is the company’s generative AI assistant, built into Facebook, Instagram, WhatsApp, Messenger, and Threads. It can answer questions, generate text or images, and recommend content. </p><p>Users will soon start to receive notifications about how their interactions with Meta’s generative AI features will be used for targeted advertising. So, ask Meta AI about vacations, hobbies, or new gadgets, for example, and you might soon find related ads in your feed. </p><p>Certain topics are excluded—religious views, sexual orientation, political views, health, racial or ethnic origin, philosophical beliefs, or trade union membership—but everything else is fair game.</p><p>Meta <a href=\"https://about.fb.com/news/2025/10/improving-your-recommendations-apps-ai-meta\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">said</a> this update takes effect on December 16, 2025, and will start notifying users on October 7, 2025 through in-product notifications and emails.</p><p>Thanks to stricter privacy laws, users in the EU, UK, and South Korea are exempt, <a href=\"https://www.theregister.com/2025/10/01/meta_ai_use_informs_ads\">The Re</a><a href=\"https://www.theregister.com/2025/10/01/meta_ai_use_informs_ads\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">gister</a> reports. </p><p>According to Meta, over 1 billion people use its AI every month. And as we all know, targeted ads bring in more money than generic ones. So, this is how Meta plans to earn back all the money it <a href=\"https://www.forbes.com/sites/kirkogunrinde/2025/09/30/coreweave-strikes-142-billion-deal-with-meta-to-boost-ai-capability\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">spent on AI development</a>.</p><p>Because, like it or not, Meta isn’t really about connecting friends all over the world. Its business model is almost entirely based on selling targeted advertising space across its platforms.</p><p>Generative AI providers are increasingly weaving advertising into their products, especially in free or freemium offerings. Many companies now use AI to create personalized ads directly within user interactions. For example, AI-powered recommendation engines analyze user data and behavior to deliver highly targeted ads, boosting relevancy and engagement. Done well, this approach makes ads feel less intrusive and more like natural content suggestions tailored to individual preferences.</p><p>Still, the industry faces big ethical and privacy challenges. Brands and AI providers must balance personalization with transparency and user control, especially as AI tools collect and analyze sensitive behavioral data. Many are turning to opt-in mechanisms, clearer privacy settings, and responsible data use policies to maintain user trust while taking advantage of AI’s ability to deliver relevant, personalized ads.</p><p>Meta promises that affected users can continue to adjust the content and ads they’re seeing at any time with tools like <a href=\"https://www.facebook.com/help/109378269482053\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Ad Preferences</a> and other <a href=\"https://about.fb.com/news/2022/10/new-ways-to-customize-your-facebook-feed\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">feed controls</a>.</p><p>The Register jokingly suggested we start our Meta AI chats with something from the “excluded” list, hoping to keep the whole conversation from being used for targeted advertising. Their example:</p><blockquote><p>“Oh, Lord, Meta really thought this was a good idea?”</p></blockquote><p>In the end, it might be better not to share anything too personal with Meta AI, or any chatbot for that matter, and stick to kittens and puppies instead.</p><p><strong>We don’t just report on threats – we help protect your social media</strong></p>","contentLength":3119,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"More .well-known Scans, (Thu, Oct 2nd)","url":"https://isc.sans.edu/diary/rss/32340","date":1759414119,"author":"","guid":352,"unread":true,"content":"<article>I have been writing about the \".well-known\" directory a few times before. Recently, about attackers hiding webshells [1], and before that, about the purpose of the directory and why you should set up a \"/.well-known/security.txt\" file. But I noticed something else when I looked at today's logs on this web server. Sometimes you do not need a honeypot. Some attackers are noisy enough to be easily visible on a busy web server. This time, the attacker hit various URLs inside the \".well-known\" directory. Here is a sample from the &gt; 100 URLs hit:</article>","contentLength":546,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Scam Facebook groups send malicious Android malware to seniors","url":"https://www.malwarebytes.com/blog/news/2025/10/scam-facebook-groups-send-malicious-android-malware-to-seniors","date":1759410570,"author":"","guid":112,"unread":true,"content":"<p>An infostealer and banking Trojan rolled into one is making the rounds in Facebook groups aimed at “active seniors”.</p><p>Attackers used social engineering methods to lure targets into joining fake Facebook groups that appeared to promote travel and community activities—such as trips, dance classes, and community gatherings. Once people joined, they were invited to download an Android app to “register” for those offered activities.</p><p>Researchers at <a href=\"https://www.threatfabric.com/blogs/datzbro-rat-hiding-behind-senior-travel-scams\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">ThreatFabric</a> found numerous Facebook groups created under this pretense, stocked with AI-generated content to appear authentic and trick users into downloading the malware. App names included Senior Group, Lively Years, ActiveSenior, and DanceWave. In some cases, victims were also asked to pay a sign-up fee on the same website, leading to phishing and card detail theft.</p><p>One of the servers hosting these downloads was located at <code>download.seniorgroupapps[.]com</code>.</p><p>Sometimes the cybercriminals sent a follow-up message through Messenger or WhatsApp, sharing the download links for the malicious apps. </p><p>Often this would be the Datzbro&nbsp;Trojan, but sometimes victims were hit with Zombinder, a <a href=\"https://www.malwarebytes.com/blog/detections/android-trojan-dropper\" target=\"_blank\" rel=\"noreferrer noopener\">Trojan dropper</a> capable of bypassing the security restrictions Google introduced in Android 13 and later versions.</p><p>The researchers found that Datzbro had capabilities similar to both <a href=\"https://www.malwarebytes.com/blog/detections/spyware\" target=\"_blank\" rel=\"noreferrer noopener\">spyware</a> and <a href=\"https://www.malwarebytes.com/blog/news/2024/02/android-banking-trojans-how-they-steal-passwords-and-drain-bank-accounts\" target=\"_blank\" rel=\"noreferrer noopener\">banking Trojans</a>—specifically designed to drain bank accounts.</p><p>Once installed, this Android malware can:</p><ul><li>Record audio and video, and access files and photos. </li><li>Display phishing <a href=\"https://www.malwarebytes.com/blog/news/2024/06/explained-android-overlays-and-how-they-are-used-to-trick-people\" target=\"_blank\" rel=\"noreferrer noopener\">overlays</a> that mimic other apps to steal passwords and send them to the attackers. </li><li>Let attackers remotely control infected Android devices, including locking or unlocking the screen.</li></ul><p>Researchers analyzed the code and suspect that it was likely developed in China, but later leaked and was reused by broader cybercriminal groups. The campaign has reached victims worldwide, including Australia, Singapore, Malaysia, Canada, South Africa, and the UK.</p><h2>How to stay safe in Facebook groups</h2><p>Although many of the Facebook groups involved in this campaign have been taken down, there might be others. To protect yourself:</p><ul><li>Check a Facebook group’s history and avoid those might have freshly set up for malicious purposes. Unfortunately, it’s not possible to check the age of a group before you join, but once you’re a member, look at the dates of historical posts or pinned posts.</li><li>Don’t click on links or install apps provided by such groups or by private messages from people you don’t really know.</li><li>Be wary of groups offering suspicious or too-good-to-be-true promises.</li><li>Check a group’s description and rules for professionalism or red flags.</li></ul><p>It’s worth noting that many of the groups also included a button to download an “iOS application.” These were just placeholders at the time, but might be an indication that there are plans to target iPhone users as well.</p><h3>Indicators of Compromise (IOCs)</h3><p><strong>The malicious app used these names:</strong></p><p><code>twzlibwr.rlrkvsdw.bcfwgozi</code></p><p><code>orgLivelyYears.browses646</code></p><p><code>inedpnok.kfxuvnie.mggfqzhl</code></p><p><strong>We don’t just report on phone security—we provide it</strong></p>","contentLength":3070,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Sendit tricked kids, harvested their data, and faked messages, FTC claims","url":"https://www.malwarebytes.com/blog/news/2025/10/sendit-app-tricked-kids-harvested-their-data-and-faked-messages-ftc-claims","date":1759395047,"author":"","guid":111,"unread":true,"content":"<p>The Federal Trade Commission (FTC) has sued Sendit’s parent company, saying it signed up children under 13, collected their personal data, and misled them with fake messages and recurring bills.</p><p>The lawsuit, filed against the app’s owner Iconic Hearts Holdings Inc and CEO Hunter Rice, alleges the company let users under the age of 13 sign up for Sendit and collected personal information about these users without parental consent—violating the Children’s Online Privacy Protection Rule (COPPA).</p><p>Sendit is an add-on for Snapchat and Instagram, rather than a standalone app. Its primary feature is to allow users to post prompts or questions (called a Sendit) on their social media stories and receive anonymous replies from other users.</p><p>In 2022, the app registered 116,000 people who self-declared that they were under 13 years old, <a href=\"https://www.ftc.gov/news-events/news/press-releases/2025/09/ftc-alleges-sendit-app-its-ceo-unlawfully-collected-personal-data-children-deceived-users-about#main-content\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">according to the suit</a>. Even after parents complained, the company continued to collect children’s phone numbers, birthdates, photos, and usernames for Snapchat, Instagram, TikTok and other accounts.</p><p>The FTC also alleges that Sendit misled users about its paid “Diamond Membership.” The feature promised to allow users to see who had sent certain messages. In practice, it didn’t reveal the senders, according to the suit. Worse still, the company and its CEO faked some of these messages, the FTC alleges. According to the complaint:</p><blockquote><p>“Defendants trick users into believing that they have received provocative and sometimes sexual or romantic messages from their social media contacts, when in reality it is often Defendants themselves who have sent those messages.”</p></blockquote><p>Iconic Hearts also failed to disclose recurring charges clearly, according to the FTC—charging up to $9.99 every week after making it look like users were paying a single fee to disclose a user’s identity.</p><p>Normally, cases like this end in a settlement. This time, the FTC referred the case to the Department of Justice (DoJ). It does this when it believes that the defendants are violating or about to violate the law, and that referring the case would be in the public interest. So now, the Central District of California will decide the case.</p><p>Iconic Hearts also publishes the apps Noteit, Starmatch, and Locksmith. Launched in 2018, Sendit has been downloaded more than five million times on Google Play, and the company claims a total user base of around 25 million. The company has claimed Sendit is “the top Gen Alpha social networking app.”</p><p>This isn’t the only case where anonymous messaging apps have run afoul of COPPA violations. In July 2024, the FTC <a href=\"https://www.ftc.gov/news-events/news/press-releases/2024/07/ftc-order-will-ban-ngl-labs-its-founders-offering-anonymous-messaging-apps-kids-under-18-halt\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">settle</a>d with NGL Labs and its founders for $5 million. That app was accused of marketing to kids and teens, sending fake messages to drive up usage, tricking users into paid upgrades, and sneaking in recurring charges.</p><p>“Company executives told employees to reach out to high school kids directly,” said the FTC at the time. NGL Labs also falsely claimed that AI content moderation filtered harmful messages like cyber bullying, the Commission added. The settlement banned NGL from marketing its app to anyone under 18.</p><p>What could this mean for Iconic Hearts? The current <a href=\"https://www.ftc.gov/business-guidance/resources/complying-coppa-frequently-asked-questions\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">maximum penalty</a> enforceable by courts for failing to comply with COPPA is $53,088 per violation, according to the FTC.</p><p>DoJ COPPA-related suits on the FTC’s behalf are not unheard of. Epic Games got a record $275 million penalty for COPPA violations in December 2022 after the DOJ sued it on behalf of the FTC (alongside another $245 million penalty for using ‘dark patterns’ to mislead users).</p><p>Epic Games was aware that many children were playing its Fortnite game, yet it collected personal data from children without first obtaining parents’ verifiable consent, the suit said. The company also made it difficult for parents to delete their children’s personal information, and sometimes didn’t do as asked.</p><p>The takeaway from this story? Try to keep kids under 13 off social media apps as long as possible, and when the time does come, stay involved. Talk to them about online safety, monitor their usage, and keep the conversation open.</p><p><strong>We don’t just report on threats – we help protect your social media</strong></p>","contentLength":4174,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ISC Stormcast For Thursday, October 2nd, 2025 https://isc.sans.edu/podcastdetail/9638, (Thu, Oct 2nd)","url":"https://isc.sans.edu/diary/rss/32338","date":1759370403,"author":"","guid":351,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Real-World Executive Protection: How We Secure Our Own Leadership Team","url":"https://www.recordedfuture.com/blog/real-world-executive-protection-how-we-secure-our-own-leadership-team","date":1759363200,"author":"","guid":296,"unread":true,"content":"<p>As businesses, government agencies, and other high-profile organizations look to safeguard their executive personnel from <a href=\"https://www.recordedfuture.com/blog/how-to-protect-your-people-and-assets-from-targeted-threats\">a rising number of threats and attacks</a>, many have reached out to us to ask:</p><p>“How does Recorded Future protect its own executives?”</p><p>I recently sat down with Brian Solecki, Recorded Future’s Director of Security and Safety, to find out.</p><p>Before coming to Recorded Future, Solecki spent 7 years on active duty in the military followed by 20+ years as a Special Agent with the U.S. Department of Defense with a focus on investigations and protective service operations. The sum total of his experience, he said, has led him to believe that <a href=\"https://www.recordedfuture.com/products/threat-intelligence\">threat intelligence</a> is the cornerstone of every effective executive protection program.</p><p>Read on for highlights from our conversation about Recorded Future’s own intelligence-led practice.</p><h2>A proactive approach to corporate security</h2><p>Solecki acknowledged that most organizations approach security in a reactive way, hiring physical security and arranging secure transportation only after threats have materialized. Recorded Future operates differently.</p><p>“We take a proactive approach that begins with crafting Priority Intelligence Requirements,” he said. “Our PIRs help us anticipate, prevent, and manage threats before they escalate to physical danger.”</p><p>A key PIR for Recorded Future is to monitor web and social media activity for suspicious content or threats in the lead-up to any event an executive will attend.</p><p>“We use <a href=\"https://www.recordedfuture.com/platform\">the Recorded Future Platform</a> to collect and analyze intelligence on a wide variety of topics, including information on police, firefighters, and emergency management services as well as their areas of operation and response times,” he said. “We also monitor lodging, restaurants, and event venues our executives and staff will be using; transportation and traffic information regarding car services, ride-share services, mass transit, and traffic chokepoints; and any potential threat actors, protest activity, or crime statistics in the areas where we’ll be operating.”</p><p>In addition to carrying out this comprehensive pre-event analysis, Solecki’s team is always ready for the unexpected. I asked him how changes on the ground can affect a security plan.</p><p>“We very much rely on real-time updates from our Platform as they enable us to make quick changes to our operations plan,” he said. “Let’s say we get an alert about police activity along a route we plan to take, or a power outage at a restaurant an executive is going to visit, or an active shooter incident occurring near where we’re operating. All of that information allows us to take actions like moving to a safe area, sheltering in place, or returning to a secure lodging location.”</p><p>He shared an example from February of this year, when Recorded Future executives attended the Munich Security Conference. On day one, <a href=\"https://www.recordedfuture.com/products/threat-intelligence\">Recorded Future Threat Intelligence</a> alerted the security team of a potential disturbance near the conference venue. This actionable intelligence immediately informed security decisions, helping the team assess the safety of the executives’ current location, evaluate planned venues, adjust routes, and determine whether the incident represented broader threat patterns.</p><h2>Incorporating intelligence-driven monitoring into daily operations</h2><p>“Daily monitoring of Watch Lists has enabled us to see when our personnel are referenced in fake news videos and derogatory social media mentions,” he said. “But we receive other kinds of helpful Alerts as well, such as when executives’ residences were recently in the path of wildfires on the west coast.”</p><p>Solecki acknowledged that today’s executives and their families all have significant digital footprints, and that family members are often seen as soft targets for attackers. Negative digital sentiment can rapidly escalate to physical risk as domestic violent extremists conduct sophisticated reconnaissance to locate and attack their targets.</p><p>“We’re always looking for escalation indicators,” he said. “These can include things like specific references to where and when an executive will be making an appearance, who their family members and/or associates are, or their modes of transportation.” His team pays close attention to the nature of the threats, looking for instances where general dislike escalates into something more direct — especially to threats of violence.</p><p>As for which trends and technologies concern him most, Solecki said he and his team are laser-focused on anything that enables more sophisticated tracking and information collection. “We pay particular attention to technologies that can track Personally Identifiable Information, locations of residences, family members, and patterns of life,” he said. “These are all a great concern on the cybersecurity front, but they’re a definite concern on the physical security front as they allow threat actors to develop plans to harm protectees.”</p><h2>Responding to threats and measuring success</h2><p>When threat indicators emerge, teams need to use effective frameworks to assess credibility and determine appropriate protective measures. I asked Solecki to walk me through his team’s alert response process.</p><p>“When we receive intelligence via the Platform, our <a href=\"https://www.recordedfuture.com/services/managed-monitoring\">Managed Services</a> team will evaluate it based on an established set of criteria,” he said. “This helps determine whether the threat actors have both the motivation and the means to carry out the threat.”</p><p>If it appears that they do, Managed Services will notify Recorded Future’s Physical and Enterprise Security teams as well as the executives involved. “Upon further evaluation,” Solecki said, “the teams will take any necessary actions to mitigate the threats, including moving to an enhanced security posture, notifying law enforcement, requesting law enforcement support, moving executives to alternate work or residential locations, or deviating from or even cancelling a trip itinerary.”</p><p>So at the end of the day, how does the team measure success?</p><p>“Ultimately, our success is determined by what didn’t happen,” Solecki said. “If our team puts measures in place that deter or prevent an attack, then we are successful. We are not successful if an attempt or attack actually occurs.”</p><h2>A rise in targeted threats and the future of executive protection</h2><p>When asked about the biggest changes he’s seen in the landscape, Solecki said he’s most concerned that recent events, like the United Healthcare incident and a suspected arson attack at a Bayer executive’s residence, have emboldened individuals to “get out from behind their keyboards” and actually engage in attacks.</p><p>As a result, he thinks we’ll see a different approach to executive protection going forward. This new approach will be based in comprehensive threat intelligence and <a href=\"https://www.recordedfuture.com/use-case/digital-risk\">digital risk protection</a>, and it will encompass both physical and cybersecurity tactics, techniques, and procedures (TTPs).</p><p>“The shift from mass casualty attacks to targeted attacks is just the beginning,” he said. “AI integration, open-source intelligence capabilities, and continued polarization of the public tell us that intelligence-driven protection is the only way forward.”</p><h2>Stay a step ahead with the Recorded Future Platform</h2><p>For organizations still relying primarily on traditional security measures, the message is clear: Threat actors are using sophisticated intelligence, so your organization must do the same or you'll always be one step behind. In executive protection, that gap can prove catastrophic.</p><p>Recorded Future threat intelligence helps close that gap. As Brian Solecki said, “When a security company protects its own executives using its own platform, that's ultimate validation.”</p><p><a href=\"https://www.recordedfuture.com/get-started#book-demo\">Schedule a demo</a> to see how Recorded Future can address your organization’s unique physical and cybersecurity needs.</p><p>Want to take a tour of the Recorded Future products, the Recorded Future Security and Safety team uses? Explore our <a href=\"https://www.recordedfuture.com/platform/demo-center\">on-demand demos</a>.</p>","contentLength":8011,"flags":null,"enclosureUrl":"https://www.recordedfuture.com/blog/media_15df8e944c1201b9915c04ab623747319651c3b4e.png?width=1200&format=pjpg&optimize=medium","enclosureMime":"","commentsUrl":null},{"title":"Gemini AI flaws could have exposed your data","url":"https://www.malwarebytes.com/blog/news/2025/10/gemini-ai-flaws-could-have-exposed-your-data","date":1759325495,"author":"","guid":110,"unread":true,"content":"<p>Security researchers <a href=\"https://www.tenable.com/blog/the-trifecta-how-three-new-gemini-vulnerabilities-in-cloud-assist-search-model-and-browsing\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">discovered</a> three vulnerabilities in Google’s Gemini artificial intelligence (AI) assistant. Although now patched, this “Trifecta”, as the researchers called it, raises important questions about how safe AI tools really are, especially as they become a part of services many of us use on a daily basis.</p><p>The flaws were found in three different Gemini components:</p><ul><li>, which summarizes logs for cloud services, could be tricked by hidden prompts inside web requests. Attackers could exploit this flaw to sneak malicious instructions into the system, potentially gaining control over cloud resources.</li><li><strong>Gemini Search Personalization Model</strong> could inject harmful prompts into a user’s Chrome browsing history by getting them to visit a special website. If the user later interacted with Gemini’s personalized search AI, the injected commands could force the AI leak to personal data, including saved information and location.</li><li> could be tricked into sending stored user information and location data to a malicious server through its web page summarization feature.</li></ul><p>Google fixed these issues by blocking Gemini from rendering dangerous links and strengthening its defenses against such <a href=\"https://www.malwarebytes.com/blog/news/2025/08/ai-browsers-could-leave-users-penniless-a-prompt-injection-warning\" target=\"_blank\" rel=\"noreferrer noopener\">prompt injections</a>. But if you used Google services that rely on Gemini AI, there is a chance these vulnerabilities were exploited before the patch—especially if you visited a malicious website or used Gemini features tied to cloud services.</p><p>These vulnerabilities are prime examples of how AI, despite its benefits, can open new attack avenues. Attackers may hide malicious instructions inside ordinary files and web requests, fooling AI into performing harmful actions without any obvious warning signs.</p><p>For everyday users, the risk is low—Google has already patched these vulnerabilities. But this news reminds all of us that AI security is an evolving concern, especially as new features and use-cases may be developed with security as an afterthought.</p><p>These flaws show that AI systems themselves can be used as a method for attacks, not just a target. This is important as AI becomes more embedded in cloud services and applications.</p><p>You should be cautious about:</p><ul><li>Avoid visiting unknown or suspicious websites, especially those that prompt you to interact with AI assistants.</li><li>Keeping software, browsers, and apps up to date to benefit from security patches.</li><li>Be mindful of the information you share with AI tools.</li></ul><p><strong>We don’t just report on threats—we remove them</strong></p>","contentLength":2461,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Forensic journey: hunting evil within AmCache","url":"https://securelist.com/amcache-forensic-artifact/117622/","date":1759312820,"author":"Cristian Souza","guid":309,"unread":true,"content":"<p>When it comes to digital forensics, AmCache plays a vital role in identifying malicious activities in Windows systems. This artifact allows the identification of the execution of both benign and malicious software on a machine. It is managed by the operating system, and at the time of writing this article, there is no known way to modify or remove AmCache data. Thus, in an incident response scenario, it could be the key to identifying lost artifacts (e.g., ransomware that auto-deletes itself), allowing analysts to search for patterns left by the attacker, such as file names and paths. Furthermore, AmCache stores the SHA-1 hashes of executed files, which allows DFIR professionals to search public threat intelligence feeds — such as <a href=\"https://opentip.kaspersky.com/\" target=\"_blank\" rel=\"noopener\">OpenTIP</a> and <a href=\"https://www.virustotal.com/gui/\" target=\"_blank\" rel=\"noopener\">VirusTotal</a> — and generate rules for blocking this same file on other systems across the network.</p><p>This article presents a comprehensive analysis of the AmCache artifact, allowing readers to better understand its inner workings. In addition, we present a new tool named “<a href=\"https://github.com/cristianzsh/amcache-evilhunter\" target=\"_blank\" rel=\"noopener\">AmCache-EvilHunter</a>“, which can be used by any professional to easily parse the  file and extract IOCs. The tool is also able to query the aforementioned intelligence feeds to check for malicious file detections, this level of built-in automation reduces manual effort and speeds up threat detection, which is of significant value for analysts and responders.</p><h2>The importance of evidence of execution</h2><p>Evidence of execution is fundamentally important in digital forensics and incident response, since it helps investigators reconstruct how the system was used during an intrusion. Artifacts such as Prefetch, ShimCache, and <a href=\"https://securelist.com/userassist-artifact-forensic-value-for-incident-response/116911/\" target=\"_blank\" rel=\"noopener\">UserAssist</a> offer clues about what was executed. AmCache is also a robust artifact for evidencing execution, preserving metadata that indicates a file’s presence and execution, even if the file has been deleted or modified. An advantage of AmCache over other Windows artifacts is that unlike them, it stores the file hash, which is immensely useful for analysts, as it can be used to hunt malicious files across the network, increasing the likelihood of fully identifying, containing, and eradicating the threat.</p><p>Application Activity Cache (AmCache) was first introduced in Windows 7 and fully leveraged in Windows 8 and beyond. Its purpose is to replace the older &nbsp;in newer systems. Unlike its predecessor, AmCache includes valuable forensic information about program execution, executed binaries and loaded drivers.</p><p>This artifact is stored as a registry hive file named  in the directory <code>C:\\Windows\\AppCompat\\Programs</code>. The metadata stored in this file includes file paths, publisher data, compilation timestamps, file sizes, and SHA-1 hashes.</p><p>It is important to highlight that the AmCache format does not depend on the operating system version, but rather on the version of the libraries (DLLs) responsible for filling the cache. In this way, even Windows systems with different patch levels could have small differences in the structure of the AmCache files. The known libraries used for filling this cache are stored under  with the following names:</p><ul></ul><p>It is worth noting that this artifact has its peculiarities and limitations. The AmCache computes the SHA-1 hash over only the first 31,457,280 bytes (≈31 MB) of each executable, so comparing its stored hash online can fail for files exceeding this size. Furthermore,  is not a true execution log: it records files in directories scanned by the Microsoft Compatibility Appraiser, executables and drivers copied during program execution, and GUI applications that required compatibility shimming. Only the last category reliably indicates actual execution. Items in the first two groups simply confirm file presence on the system, with no data on whether or when they ran.</p><p>In the same directory, we can find additional LOG files used to ensure  consistency and recovery operations:</p><ul><li>C:\\Windows\\AppCompat\\Programs\\Amcache.hve.*LOG1</li><li>C:\\Windows\\AppCompat\\Programs\\Amcache.hve.*LOG2</li></ul><p>The  file can be collected from a system for forensic analysis using tools like <a href=\"https://github.com/abaghinyan/aralez\" target=\"_blank\" rel=\"noopener\">Aralez</a>, <a href=\"https://docs.velociraptor.app/downloads/\" target=\"_blank\" rel=\"noopener\">Velociraptor</a>, or <a href=\"https://www.sans.org/tools/kape\" target=\"_blank\" rel=\"noopener\">Kape</a>.</p><p>The  file is a Windows Registry hive in REGF format; it contains multiple subkeys that store distinct classes of data. A simple Python parser can be implemented to iterate through  and present its keys:</p><pre>#!/usr/bin/env python3\n\nimport sys\nfrom Registry.Registry import Registry\n\nhive = Registry(str(sys.argv[1]))\nroot = hive.open(\"Root\")\n\nfor rec in root.subkeys():\n    print(rec.name())</pre><p>\nThe result of this parser when executed is:</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1.png\"><img fetchpriority=\"high\" decoding=\"async\" aria-describedby=\"caption-attachment-117624\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1.png\" alt=\"AmCache keys\" width=\"1657\" height=\"796\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1.png 1657w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-300x144.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-1024x492.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-768x369.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-1536x738.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-729x350.png 729w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-740x355.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-583x280.png 583w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163530/amcache-forensic-artifact1-800x384.png 800w\" sizes=\"(max-width: 1657px) 100vw, 1657px\"></a></div><p>From a DFIR perspective, the keys that are of the most interest to us are , , , and <code>InventoryApplicationShortcut</code>, which are described in detail in the following subsections.</p><p>The &nbsp;key is essential for tracking every executable discovered on the system. Under this key, each executable is represented by its own uniquely named subkey, which stores the following main metadata:</p><ul><li> a unique hash generated from the binary name, version, publisher, and language, with some zeroes appended to the beginning of the hash</li><li> the SHA-1 hash of the file, with four zeroes appended to the beginning of the hash</li><li> the full lowercase path to the executable</li><li> the file base name without the path information</li><li> the original filename as specified in the PE header’s version resource, indicating the name assigned by the developer at build time</li><li> often used to verify if the source of the binary is legitimate. For malware, this subkey is usually empty</li><li> the specific build or release version of the executable</li><li> indicates whether the executable is a 32-bit or 64-bit binary</li><li> the ProductName field from the version resource, describing the broader software product or suite to which the executable belongs</li><li>the compilation timestamp extracted from the PE header</li><li> the file size in bytes</li><li> a boolean flag that specifies whether the executable is a built-in OS component or a third-party application/library</li></ul><p>With some tweaks to our original Python parser, we can read the information stored within this key:</p><pre>#!/usr/bin/env python3\n\nimport sys\nfrom Registry.Registry import Registry\n\nhive = Registry(sys.argv[1])\nroot = hive.open(\"Root\")\n\nsubs = {k.name(): k for k in root.subkeys()}\nparent = subs.get(\"InventoryApplicationFile\")\n\nfor rec in parent.subkeys():\n   vals = {v.name(): v.value() for v in rec.values()}\n   print(\"{}\\n{}\\n\\n-----------\\n\".format(rec, vals))</pre><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2.jpeg\"><img decoding=\"async\" aria-describedby=\"caption-attachment-117625\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2.jpeg\" alt=\"InventoryApplicationFile subkeys\" width=\"1335\" height=\"560\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2.jpeg 1335w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-300x126.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-1024x430.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-768x322.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-834x350.jpeg 834w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-740x310.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-668x280.jpeg 668w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30163907/amcache-forensic-artifact2-800x336.jpeg 800w\" sizes=\"(max-width: 1335px) 100vw, 1335px\"></a><p>InventoryApplicationFile subkeys</p></div><p>We can also use tools like Registry Explorer to see the same data in a graphical way:</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3.png\"><img decoding=\"async\" aria-describedby=\"caption-attachment-117626\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3.png\" alt=\"InventoryApplicationFile inspected through Registry Explorer\" width=\"1285\" height=\"546\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3.png 1285w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-300x127.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-1024x435.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-768x326.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-824x350.png 824w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-740x314.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-659x280.png 659w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164000/amcache-forensic-artifact3-800x340.png 800w\" sizes=\"(max-width: 1285px) 100vw, 1285px\"></a><p>InventoryApplicationFile inspected through Registry Explorer</p></div><p>As mentioned before, AmCache computes the SHA-1 hash over only the first 31,457,280 bytes (≈31 MB). To prove this, we did a small experiment, during which we got a binary smaller than 31 MB (Aralez) and one larger than this value (a custom version of Velociraptor). For the first case, the SHA-1 hash of the entire binary was stored in AmCache.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117627\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4.png\" alt=\"First AmCache SHA-1 storage scenario\" width=\"1710\" height=\"561\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4.png 1710w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-300x98.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-1024x336.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-768x252.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-1536x504.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-1067x350.png 1067w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-740x243.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-853x280.png 853w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164055/amcache-forensic-artifact4-800x262.png 800w\" sizes=\"auto, (max-width: 1710px) 100vw, 1710px\"></a><p>First AmCache SHA-1 storage scenario</p></div><p>For the second scenario, we used the dd utility to extract the first 31 MB of the Velociraptor binary:</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117628\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5.png\" alt=\"Stripped binary\" width=\"1556\" height=\"375\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5.png 1556w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-300x72.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-1024x247.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-768x185.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-1536x370.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-1452x350.png 1452w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-740x178.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-1162x280.png 1162w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164152/amcache-forensic-artifact5-800x193.png 800w\" sizes=\"auto, (max-width: 1556px) 100vw, 1556px\"></a></div><p>When checking the Velociraptor entry on AmCache, we found that it indeed stored the SHA-1 hash calculated only for the first 31,457,280 bytes of the binary. Interestingly enough, the Size value represented the actual size of the original file. Thus, relying only on the file hash stored on AmCache for querying threat intelligence portals may be not enough when dealing with large files. So, we need to check if the file size in the record is bigger than 31,457,280 bytes before searching threat intelligence portals.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117629\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6.png\" alt=\"Second AmCache SHA-1 storage scenario\" width=\"1710\" height=\"552\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6.png 1710w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-300x97.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-1024x331.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-768x248.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-1536x496.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-1084x350.png 1084w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-740x239.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-867x280.png 867w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30164250/amcache-forensic-artifact6-800x258.png 800w\" sizes=\"auto, (max-width: 1710px) 100vw, 1710px\"></a><p>Second AmCache SHA-1 storage scenario</p></div><p>Additionally, attackers may take advantage of this characteristic to purposely generate large malicious binaries. In this way, even if investigators find that a malware was executed/present on a Windows system, the actual SHA-1 hash of the binary will still be unknown, making it difficult to track it across the network and gathering it from public databases like VirusTotal.</p><p>Let’s suppose you are searching for a possible insider threat. The user denies having run any suspicious programs, and any suspicious software was securely erased from disk. But in the InventoryApplicationFile, you find a record of winscp.exe being present in the user’s Downloads folder. Even though the file is gone, this tells you the tool was on the machine and it was likely used to transfer files before being deleted. In our incident response practice, we have seen similar cases, where this key proved useful.</p><p>The &nbsp;key records details about applications that were previously installed on the system. Unlike , which logs every executable encountered, &nbsp;focuses on those with installation records. Each entry is named by its unique ProgramId, allowing straightforward linkage back to the corresponding InventoryApplicationFile key. Additionally,  has the following subkeys of interest:</p><ul><li> a date‑time string indicating when the OS first recorded or recognized the application</li><li> present only if installed via Windows Installer (MSI); shows the exact time the MSI package was applied, sourced directly from the MSI metadata</li><li> the exact command line used to remove the application</li><li> numeric locale identifier set by the developer (LCID)</li><li> the name of the software publisher or vendor</li><li> the file path to the installation manifest used by UWP or AppX/MSIX apps</li></ul><p>With a simple change to our parser, we can check the data contained in this key:</p><pre>&lt;...&gt;\nparent = subs.get(\"InventoryApplication\")\n&lt;...&gt;</pre><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117630\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7.png\" alt=\"InventoryApplication subkeys\" width=\"1345\" height=\"345\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7.png 1345w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7-300x77.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7-1024x263.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7-768x197.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7-740x190.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7-1092x280.png 1092w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165005/amcache-forensic-artifact7-800x205.png 800w\" sizes=\"auto, (max-width: 1345px) 100vw, 1345px\"></a><p>InventoryApplication subkeys</p></div><p>When a &nbsp;appears both here and under , it confirms that the executable is not merely present or executed, but was formally installed. This distinction helps us separate ad-hoc copies or transient executions from installed software. The following figure shows the  of the WinRAR software under .</p><p>When searching for the , we find an exact match under . This confirms that WinRAR was indeed installed on the system.</p><p>Another interesting detail about  is that it contains a subkey named , which is stored separately from  and holds a value representing the last time the Microsoft Compatibility Appraiser ran. This is a scheduled task that launches the  binary, and the information in this key should only be updated when that task executes. As a result, software installed since the last run of the Appraiser may not appear here. The  value is stored in  format.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117633\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10.png\" alt=\"InventoryApplication LastScanTime information\" width=\"878\" height=\"118\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10.png 878w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10-300x40.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10-768x103.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10-740x99.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165538/amcache-forensic-artifact10-800x108.png 800w\" sizes=\"auto, (max-width: 878px) 100vw, 878px\"></a><p>InventoryApplication LastScanTime information</p></div><h4>InventoryApplication – use case example: spotting remote access software</h4><p>Suppose that during an incident response engagement, you find an entry for AnyDesk in the InventoryApplication key (although the application is not installed anymore). This means that the attacker likely used it for remote access and then removed it to cover their tracks. Even if wiped from disk, this key proves it was present. We have seen this scenario in real-world cases more than once.</p><p>The  key records every kernel-mode driver that the system has loaded, providing the essential metadata needed to spot suspicious or malicious drivers. Under this key, each driver is captured in its own uniquely named subkey and includes:</p><ul><li>: the SHA-1 hash of the driver binary, with four zeroes appended to the beginning of the hash</li><li>: the full lowercase file path to the driver on disk</li><li>: the code-signing certificate details. A valid, trusted signature helps confirm the driver’s authenticity</li><li>: the file’s last modification timestamp from the filesystem metadata, revealing when the driver binary was most recently altered on disk</li></ul><p>Because Windows drivers run at the highest privilege level, they are frequently exploited by malware. For example, a previous study conducted by Kaspersky shows that attackers are <a href=\"https://securelist.com/av-killer-exploiting-throttlestop-sys/117026/\" target=\"_blank\" rel=\"noopener\">exploiting vulnerable drivers for killing EDR processes</a>. When dealing with a cybersecurity incident, investigators correlate each driver’s cryptographic hash, file path, signature status, and modification timestamp. That can help in verifying if the binary matches a known, signed version, detecting any tampering by spotting unexpected modification dates, and flagging unsigned or anomalously named drivers for deeper analysis. Projects like <a href=\"https://www.loldrivers.io/\" target=\"_blank\" rel=\"noopener\">LOLDrivers</a> help identify vulnerable drivers in use by attackers in the wild.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117634\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11.png\" alt=\"InventoryDriverBinary inspection\" width=\"1450\" height=\"533\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11.png 1450w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-300x110.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-1024x376.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-768x282.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-952x350.png 952w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-740x272.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-762x280.png 762w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30165732/amcache-forensic-artifact11-800x294.png 800w\" sizes=\"auto, (max-width: 1450px) 100vw, 1450px\"></a><p>InventoryDriverBinary inspection</p></div><p>In addition to the , AmCache also provides the <code>InventoryApplicationDriver</code> key, which keeps track of all drivers that have been installed by specific applications. It includes two entries:</p><ul><li>, which identifies the name of the service linked to the installed driver; and</li><li>, which lists the program identifiers (corresponding to the key names under ) that were responsible for installing the driver.</li></ul><p>As shown in the figure below, the  key can be used to track the associated program that uses this driver:</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117635\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12.png\" alt=\"Checking program information by ProgramIds\" width=\"1555\" height=\"894\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12.png 1555w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-300x172.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-1024x589.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-768x442.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-1536x883.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-609x350.png 609w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-740x425.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-487x280.png 487w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170026/amcache-forensic-artifact12-800x460.png 800w\" sizes=\"auto, (max-width: 1555px) 100vw, 1555px\"></a><p>Checking program information by ProgramIds</p></div><h4>InventoryDriverBinary – use case example: catching a bad driver</h4><p>If the system was compromised through the abuse of a known vulnerable or malicious driver, you can use the &nbsp;registry key to confirm its presence. Even if the driver has been removed or hidden, remnants in this key can reveal that it was once loaded, which helps identify kernel-level compromises and supporting timeline reconstruction during the investigation. This is exactly how the <a href=\"https://securelist.com/av-killer-exploiting-throttlestop-sys/117026/\" target=\"_blank\" rel=\"noopener\">AV Killer malware</a> was discovered.</p><h3>InventoryApplicationShortcut</h3><p>This key contains entries for  (shortcut) files that were present in folders like each user’s Start Menu or Desktop. Within each shortcut key, the ShortcutPath provides the absolute path to the LNK file at the moment of discovery. The  shows where the shortcut pointed. We can also search for the  entry within the  key using the  (similar to what we did for drivers).</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117636\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13.png\" alt=\"InventoryApplicationShortcut key\" width=\"1586\" height=\"306\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13.png 1586w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-300x58.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-1024x198.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-768x148.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-1536x296.png 1536w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-740x143.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-1451x280.png 1451w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30170311/amcache-forensic-artifact13-800x154.png 800w\" sizes=\"auto, (max-width: 1586px) 100vw, 1586px\"></a><p>InventoryApplicationShortcut key</p></div><h4>InventoryApplicationShortcut – use case example: confirming use of a removed app</h4><p>You find that a suspicious program was deleted from the computer, but the user claims they never ran it. The <code>InventoryApplicationShortcut</code> key shows a shortcut to that program was on their desktop and was accessed recently. With supplementary evidence, such as that from Prefetch analysis, you can confirm the execution of the software.</p><p>The table below summarizes the information presented in the previous subsections, highlighting the main information about each AmCache key.</p><table><tbody><tr></tr><tr><td>Metadata for all executables seen on the system.</td><td>Possibly (presence = likely executed)</td></tr><tr><td>Metadata about formally installed software.</td><td>No (indicates installation, not necessarily execution)</td></tr><tr><td>Metadata about loaded kernel-mode drivers.</td><td>Yes (driver was loaded into memory)</td></tr><tr><td>InventoryApplicationShortcut</td><td>Information about .lnk files.</td><td>Possibly (combine with other data for confirmation)</td></tr></tbody></table><p>Undoubtedly &nbsp;is a very important forensic artifact. However, we could not find any tool that effectively parses its contents while providing threat intelligence for the analyst. With this in mind, we developed <a href=\"https://github.com/cristianzsh/amcache-evilhunter\" target=\"_blank\" rel=\"noopener\">AmCache-EvilHunter</a> a command-line tool to parse and analyze Windows  registry hives, identify evidence of execution, suspicious executables, and integrate Kaspersky OpenTIP and VirusTotal lookups for enhanced threat intelligence.</p><p>AmCache-EvilHunter is capable of processing the  file and filter records by date range (with the options &nbsp;and ). It is also possible to search records using keywords (), which is useful for searching for known naming conventions adopted by attackers. The results can be saved in CSV () or JSON () formats.</p><p>The image below shows an example of execution of AmCache-EvilHunter with these basic options, by using the following command:</p><pre>amcache-evilhunter -i Amcache.hve --start 2025-06-19 --end 2025-06-19 --csv output.csv</pre><p>\nThe output contains all applications that were present on the machine on June 19, 2025. The last column contains information whether the file is an operating system component, or not.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117638\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14.png\" alt=\"Basic usage of AmCache-EvilHunter\" width=\"1342\" height=\"370\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14.png 1342w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-300x83.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-1024x282.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-768x212.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-1269x350.png 1269w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-740x204.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-1016x280.png 1016w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213455/amcache-forensic-artifact14-800x221.png 800w\" sizes=\"auto, (max-width: 1342px) 100vw, 1342px\"></a><p>Basic usage of AmCache-EvilHunter</p></div><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117639\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15.png\" alt=\"CSV result\" width=\"1340\" height=\"268\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15.png 1340w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15-300x60.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15-1024x205.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15-768x154.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15-740x148.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213535/amcache-forensic-artifact15-800x160.png 800w\" sizes=\"auto, (max-width: 1340px) 100vw, 1340px\"></a></div><p>Analysts are often faced with a large volume of executables and artifacts. To narrow down the scope and reduce noise, the tool is able to search for known suspicious binaries with the . The patterns used by the tool include common malware names, Windows processes containing small typos (e.g., ), legitimate executables usually found in use during incidents, one-letter/one-digit file names (such as , ), or random hex strings. The figure below shows the results obtained by using this option; as highlighted, one  file is part of the operating system and the other is not, making it a good candidate for collection and analysis if not deleted.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16.png\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117640\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16.png\" alt=\"Suspicious files identification\" width=\"1341\" height=\"235\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16.png 1341w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16-300x53.png 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16-1024x179.png 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16-768x135.png 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16-740x130.png 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213814/amcache-forensic-artifact16-800x140.png 800w\" sizes=\"auto, (max-width: 1341px) 100vw, 1341px\"></a><p>Suspicious files identification</p></div><p>Malicious files usually do not include any publisher information and are definitely not part of the default operating system. For this reason, AmCache-EvilHunter also ships with the  and . These parameters allow for easy filtering of suspicious binaries and also allow fast threat intelligence gathering, which is crucial during an incident.</p><p>Another important feature that distinguishes our tool from other proposed approaches is that AmCache-EvilHunter can query Kaspersky OpenTIP ( ) and VirusTotal () for hashes it identifies. In this way, analysts can rapidly gain insights into samples to decide whether they are going to proceed with a full analysis of the artifact or not.</p><div><a href=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17.jpeg\"><img loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-117641\" src=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17.jpeg\" alt=\"Threat intel lookup\" width=\"1339\" height=\"182\" srcset=\"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17.jpeg 1339w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17-300x41.jpeg 300w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17-1024x139.jpeg 1024w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17-768x104.jpeg 768w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17-740x101.jpeg 740w, https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/09/30213952/amcache-forensic-artifact17-800x109.jpeg 800w\" sizes=\"auto, (max-width: 1339px) 100vw, 1339px\"></a></div><p>Binaries of the tool are available on <a href=\"https://github.com/cristianzsh/amcache-evilhunter/releases/\" target=\"_blank\" rel=\"noopener\">our GitHub page</a> for both Linux and Windows systems.</p><p> is a cornerstone of Windows forensics, capturing rich metadata, such as full paths, SHA-1 hashes, compilation timestamps, publisher and version details, for every executable that appears on a system. While it does not serve as a definitive execution log, its strength lies in documenting file presence and paths, making it invaluable for spotting anomalous binaries, verifying trustworthiness via hash lookups against threat‐intelligence feeds, and correlating  values with known attack campaigns.</p><p>To extract its full investigative potential, analysts should merge AmCache data with other artifacts (e.g., Prefetch, ShimCache, and Windows event logs) to confirm actual execution and build accurate timelines. Comparing &nbsp;entries against  reveals whether a file was merely dropped or formally installed, and identifying unexpected driver records can expose stealthy rootkits and persistence mechanisms. Leveraging parsers like AmCache-EvilHunter and cross-referencing against VirusTotal or proprietary threat databases allows IOC generation and robust incident response, making AmCache analysis a fundamental DFIR skill.</p>","contentLength":18282,"flags":null,"enclosureUrl":"https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2025/10/01111328/SL-AmCache-forensic-artifact-featured-150x150.jpg","enclosureMime":"","commentsUrl":null},{"title":"TOTOLINK X6000R: Three New Vulnerabilities Uncovered","url":"https://unit42.paloaltonetworks.com/totolink-x6000r-vulnerabilities/","date":1759312808,"author":"Zhibin Zhang","guid":125,"unread":true,"content":"<p>Researchers identified vulnerabilities in TOTOLINK X6000R routers: CVE-2025-52905, CVE-2025-52906 and CVE-2025-52907. We discuss root cause and impact.</p>","contentLength":151,"flags":null,"enclosureUrl":"https://unit42.paloaltonetworks.com/wp-content/uploads/2025/09/02_Vulnerabilities_1920x900.jpg","enclosureMime":"","commentsUrl":null},{"title":"Rhadamanthys 0.9.x – walk through the updates","url":"https://research.checkpoint.com/2025/rhadamanthys-0-9-x-walk-through-the-updates/","date":1759307557,"author":"shlomoo@checkpoint.com","guid":261,"unread":true,"content":"<ul><li>Rhadamanthys is a popular, multi-modular stealer, released in 2022. Since then, it has been used in multiple campaigns by various actors. Most recently, it is being observed&nbsp;<a href=\"https://x.com/anyrun_app/status/1955260801968672841\">in the ClickFix campaigns</a>.</li><li>The latest version, 0.9.2, comes with significant updates that may impact detection and enforce updates to tools used by researchers.</li><li>Check Point Research (CPR) provides multiple scripts that can help defenders keep up with these changes: a converter for the new version of the custom executable format, a deobfuscator for strings, and an unpacker for the package that carries the modules.</li><li>In this report we provide details of the latest changes and describe them in the context of the malware as a whole.</li></ul><p>Rhadamanthys is a complex, multi-modular malware sold on the underground market since September 2022. It was first advertised by the actor “kingcrete2022.” From the outset, its design showed the hallmarks of experienced developers, and analysis soon revealed that it drew heavily from an earlier project by the same authors, Hidden Bee [<a href=\"https://research.checkpoint.com/2023/from-hidden-bee-to-rhadamanthys-the-evolution-of-custom-executable-formats/\">1</a>]. This strong foundation helped Rhadamanthys quickly gain traction: from a niche product, it grew into one of the dominant stealers in cybercrime campaigns and has even attracted interest from more advanced threat actors.</p><p>Since its appearance, Check Point Research (CPR) has been closely tracking its development, noting constant updates and customization options. In previous publications, we explored the&nbsp;<a href=\"https://research.checkpoint.com/2023/rhadamanthys-the-everything-bagel-infostealer/\">breadth of its features</a>,&nbsp;<a href=\"https://research.checkpoint.com/2023/from-hidden-bee-to-rhadamanthys-the-evolution-of-custom-executable-formats/\">internal design</a>, and the execution flow of its components&nbsp;<a href=\"https://research.checkpoint.com/2023/rhadamanthys-v0-5-0-a-deep-dive-into-the-stealers-components\">using v0.5 as an example</a>. Much of that work remains relevant today, as the core architecture has stayed intact.</p><p>However, with the release of v0.9.x, Rhadamanthys introduced changes that broke some of our previously published tools, including the custom format converter and string deobfuscator. This was a clear sign that the family had reached another milestone update, one significant enough to warrant a fresh analysis. In this blog, we present our findings on the latest release, v0.9.2.</p><p>It is worth noting that the initial loader of Rhadamanthys comes in multiple variants: it can be a .NET executable or a native Windows executable (32- or 64-bit). The main target of our analysis is the execution chain started by the native version. Although the first stage varies, the later stages are identical for all loader types.</p><p>Rhadamanthys was initially promoted through posts on cybercrime forums, but soon it became clear that the author had a more ambitious plan to connect with potential customers and build visibility. In parallel, they launched a Telegram support channel, a Tor website with detailed product descriptions, and offered communication via Tox. Most recently, the website underwent a complete makeover, presenting a polished and professional image. The operators now brand themselves as “RHAD security” and “Mythical Origin Labs.”</p><p>The new site showcases all of their products, including teasers for those still in development. Alongside Rhadamanthys – their flagship stealer – they also advertise&nbsp;&nbsp;and a&nbsp;. Version updates are also listed, though this section is not always up to date with actual releases.</p><p>As before, Rhadamanthys is offered in tiered packages: from $299 per month for a self-hosted version, to $499 per month with a rented server and additional benefits. A special Enterprise tier, with individually negotiated pricing, is also available.</p><p>The combination of the branding, product portfolio, and pricing structure suggest that the authors treat Rhadamanthys as a long-term business venture rather than a side project.</p><p>For defenders, this professionalization signals that Rhadamanthys with its growing customer base and an expanding ecosystem is likely here to stay, making it important to track not only its malware updates but also the business infrastructure that sustains it.</p><p>The release of version 0.9 was announced in February 2025, followed by subsequent updates 0.9.1 and 0.9.2. The official website, however, still lists only 0.9.1 (released in May). Its changelog includes a long list of updates, reproduced below:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">v0.9.1 (2025-05-18)\n- Redesigned database operation process, separated read and write operations. Ensures data write integrity\n- User management permission levels, introduced new worker, traffic merchant, removed observer mode\n- Optimized file packaging and CPU usage when exporting to directory. Significantly reduced log packaging export speed\n- TOR removed random address generation, fixed address permanently effective\n- Management login added 2FA OTP login verification\n- Client and task plugins, introduced memory mutex throughout the process, suppressing multiple executions on the same machine sending duplicate data\n- Client loading introduced tracking system, can interface with user's loading program. Program startup and data collection work will trigger WEBHOOK callback\n- When generating client files, directly select tags from list, generated files named by build tags\n- Support using multiple server lists for client building\n- Support relay jump page, real server URL encrypted stored in jump page\n- Build stub completely removed registry write operations, X64 version, added process injection switch, can choose self-process injection and new process injection\n- Task execution conditions added HWID condition\n- LOG display pagination list added log total count display\n- LOG list page added download count flag block\n- FILE download added, one-click package all exported logs into a compressed package, convenient for download\n- Telegram message template, added new filter categories\n- Added shim server work detection, 5 minutes offline, sends Telegram message notification\n- Fixed delete duplicate LOG function, keeps latest record\n- Fixed search function, fixed time search function\n- Agrent_X wallet, changed to Argent\n- a Kepler wallet changed to Keplr\n- API interface changes, added new API interfaces\n- Get device fingerprint information, added browser fingerprint information collection\n- Build stub redesigned, higher stability and reliability\n- Added nonascii: true configuration, supporting non-ASCII character password filtering</pre><p>Several entries stand out, including the introduction of a global mutex to suppress duplicate executions, expanded process injection options, and a redesigned build stub. These indicate modifications to the core modules.</p><p>Version 0.9.2, released a few months later and already gaining traction, is not yet listed on the website.</p><p>As always, such changelogs are written for customers and do not fully capture the points of greatest interest to researchers. However, they still provide useful hints about which areas of the stealer have changed. In the following sections, we present the results of our analysis and highlight the modifications we confirmed, together with several changes that were not documented in the public notes.</p><p>The first thing that stands out in the updated release (0.9.2) is the introduction of a new message box that appears at the start of the malware. We encounter it as soon as we unpack the initial executable.</p><p>It’s a well-known fact is that most malware is distributed in a protective layer, meant to thwart static detection. The usual first step of analysis is to remove it and reach the core executable (it can be done automatically, i.e.&nbsp;with the help of tools like PE-sieve/<a href=\"https://github.com/hasherezade/hollows_hunter\">HollowsHunter</a>). Interestingly, after unpacking the latest Rhadamanthys (0.9.2), as we try to run the obtained executable, the warning message shows up, saying: “Do you want to run a malware? (Crypt build to disable this message)”.</p><p>This message box is familiar to anyone who has ever analyzed the famous Lumma stealer (more info:&nbsp;<a href=\"https://outpost24.com/blog/lummac2-anti-sandbox-technique-trigonometry-human-detecti\">here</a>&nbsp;[5]).</p><p>In the past, the Lumma stealer introduced a check aimed at preventing malware distributors from spreading the initial executable in its plain, unprotected form, which can be easily detected. It was also preventing unskilled distributors from getting their own machine infected. The malware checks the file from which it is deployed, and if it found familiar patterns at the defined offsets, it recognizes that it is running from the raw, unpacked sample. In such cases, instead of running malicious actions immediately, a pop-up is displayed, asking the user for permission to continue. An identical check is now performed by Rhadamanthys.</p><p>At first glance, it may appear that both malware families share the same code, responsible for displaying the message. But upon closer inspection, we can see that completely different APIs are called along the way. In Lumma, opening and reading the file is implemented via raw syscalls, and the message box is executed via&nbsp;.</p><p>In Rhadamanthys, raw syscalls aren’t used, and the same message box is displayed by&nbsp;.</p><p>Both loaders are obfuscated, but the obfuscation patterns are different. In the case of the Rhadamanthys loader, the APIs used are static, but the code blocks that call them are disconnected – this obfuscation pattern reminds of some LLVM-based obfuscators.</p><p>In contrast, Lumma code is much more coherent and can be decompiled. The important functions are called via syscalls, using a single proxy function:</p><p>Therefore, despite the surface-level similarity, it seems to be just a behavioral mimicry. We don’t have any proof of links between the Lumma development group and Rhadamanthys; however, it is possible that after&nbsp;<a href=\"https://www.europol.europa.eu/media-press/newsroom/news/europol-and-microsoft-disrupt-world%E2%80%99s-largest-infostealer-lumma\">Europol’s operation earlier this year</a>, some members of the original Lumma team joined the promising competitor.</p><p>This message box occurs in the Stage 1 executable. Typically for Rhadamanthys, this executable runs a shellcode in memory, which loads Stage 2, that consist of multiple modules. Its core modules are implemented in a format proprietary to this malware that we denote as XS.</p><p>Since its inception, Rhadamanthys has shipped its executable modules in custom formats rather than the standard PEs. Only the first stage (the initial component), is a typical Windows executable. Its role is to prepare and deploy the set of components, that are unpacked from the internal package.</p><p>Custom formats preserve all the essential components of an executable, such as relocations, import tables, and sections with access rights – but this information is stored in headers fully reinvented by the authors. Unlike PE or ELF files, which are natively supported by the operating systems, custom executables require proprietary loaders. This acts as a form of obfuscation, as standard tools can’t parse them. In addition, the absence of expected headers makes it more difficult to dump those components from memory, and reconstruct them.</p><p>The evolution of the custom formats used by Rhadamanthys was described in detail in our earlier work&nbsp;<a href=\"https://research.checkpoint.com/2023/from-hidden-bee-to-rhadamanthys-the-evolution-of-custom-executable-formats/\"><em>From Hidden Bee to Rhadamanthys</em></a>, along with a tool to convert them into PE for easier study (<a href=\"https://github.com/hasherezade/hidden_bee_tools/releases\">available here</a>). Since version 0.5, Rhadamanthys modules used formats starting with the magic value&nbsp;. Two subtypes exist, used at different stages of execution (details outlined&nbsp;<a href=\"https://speakerdeck.com/hshrzd/rhadamanthys-and-the-40-thieves-the-nuts-bolts-and-lineage-of-a-multimodular-stealer?slide=36\">here</a>):</p><ul><li>: modules from the Stage 2 package, embedded in the initial executable.</li><li>: modules from the Stage 3 package, downloaded from C2 after environment checks.</li></ul><p>In v0.9.x, both formats received updates, which we label&nbsp;&nbsp;and&nbsp;.</p><p>The first subtype (XS1) contains an extended header, with a field denoting the version number. The current variant is version 4, a direct increment over the&nbsp;<a href=\"https://research.checkpoint.com/2023/from-hidden-bee-to-rhadamanthys-the-evolution-of-custom-executable-formats/\">previously described one</a>.</p><p>The header of the XS1_B can be described by the following structure:</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#pragma pack(push, 1) // Adjust to one byte\n        typedef struct {\n            WORD magic;\n            WORD nt_magic;\n            WORD sections_count;\n            **//WORD imp_key; &lt;- removed**\n            WORD hdr_size;\n            BYTE ver;\n            **BYTE imp_key; // &lt;- added here**\n            DWORD module_size;\n            DWORD entry_point;\n            t_XS_data_dir data_dir[XS_DATA_DIR_COUNT];\n            t_XS_section sections;\n        } t_XS_format_B;\n#pragma pack(pop) // Back to the previous settings</pre><p>The major change that we can observe is a lack of the WORD field before the header size. In the previous version (XS1_A) this field stood for the key that was used for deobfuscating the names of the DLLs, used in the custom Import Table. Now this field is removed, because&nbsp;<a href=\"https://github.com/hasherezade/hidden_bee_tools/blob/75cf8cc9d1252c09b95166e4b0512f0ac2e5c986/bee_lvl2_converter/xs_exe.cpp#L222\">the deobfuscating algorithm</a>&nbsp;has been replaced with&nbsp;<a href=\"https://github.com/hasherezade/hidden_bee_tools/blob/75cf8cc9d1252c09b95166e4b0512f0ac2e5c986/bee_lvl2_converter/xs_exe.cpp#L250\">the new one</a>:</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">bool decode_name_B(BYTE* dll_name, size_t name_len)\n{\n    if (!name_len) {\n        return false;\n    }\n\n    BYTE out_name[128] = { 0 };\n    size_t indx = 0;\n    size_t pos = 0;\n    size_t flag = 0;\n\n    for (size_t i = 0; i &lt; name_len; ++i) {\n        BYTE outC = 0;\n        for (WORD round = 7; round &gt; 0; round--) {\n            BYTE val = dll_name[indx];\n            if (pos) {\n                flag = (val &gt;&gt; (7 - pos)) &amp; 1;\n                if (pos == 7) {\n                    pos = 0;\n                    ++indx;\n                }\n                else {\n                    ++pos;\n                }\n            }\n            else {\n                flag = val &gt;&gt; 7;\n                pos = 1;\n            }\n            outC |= (flag != 0) &lt;&lt; (round - 1);\n        }\n        if (!is_valid_dll_char(outC)) {\n            return false;\n        }\n        out_name[i] = outC;\n    }\n    out_name[name_len] = 0;\n    ::memcpy(dll_name, out_name, name_len);\n    return true;\n}</pre><p>Still, the malware uses an import deobfuscation key () to resolve imported functions. This time the key is shorter, only one BYTE long. It is used in&nbsp;<a href=\"https://github.com/hasherezade/hidden_bee_tools/blob/75cf8cc9d1252c09b95166e4b0512f0ac2e5c986/bee_lvl2_converter/xs_exe.cpp#L429\">calculating checksums</a>&nbsp;that are then mapped to particular functions’ names.</p><p>The next stage format (XS2_B) underwent some lighter modifications. The only thing that changed was one of the fields in the custom import structure: it was extended from WORD to DWORD. This field carries the name of the DLL. In the past it could be carried in an obfuscated form, now it is used as is.</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#pragma pack(push, 1) // Adjust to one byte\n        typedef struct {\n            DWORD dll_name_rva;\n            DWORD first_thunk;\n            DWORD original_first_thunk;\n            **DWORD obf_dll_len; //WORD obf_dll_len;**\n        } t_XS_import_B;\n#pragma pack(pop) // Back to the previous settings</pre><p>As we can see, the changes do not add any new qualities to the format. The most likely role of the restructuring is to invalidate earlier parsers. It reflects the ongoing pattern of incremental churn aimed at slowing analysts down.</p><p>All the changes are now reflected in the updates to&nbsp;<a href=\"https://github.com/hasherezade/hidden_bee_tools/releases\">our tool</a>, and the new modules can be successfully converted into PE.</p><p>The Stage 2 core, implemented as an XS1 module, starts its execution with various checks that are used to decide if the malware should continue its execution. Most of them have not changed since earlier versions. However, some underwent makeovers.</p><h2>Removal of the SibCode key</h2><p>In the past, in consecutive versions of Rhadamanthys, it used the&nbsp;&nbsp;registry keys in order to save the timestamp of the last execution. Depending on the version, the keys may look like one of the following:</p><ul><li><code>HKCU\\SOFTWARE\\SibCode\\sn2</code></li><li><code>HKCU\\SOFTWARE\\SibCode\\sn3</code></li></ul><p>It was introduced to prevent the sample from being executed again too quickly after the first deployment. While initially the timestamp was saved as a single DWORD, in consecutive releases the author put more effort into making it tamper-proof. It was described in detail in [<a href=\"https://go.recordedfuture.com/hubfs/reports/mtp-2024-0926.pdf\">4</a>] under “Re-Execution Delay Feature”. The presence of this registry key was one of the easy-to-notice symptoms of Rhadamanthys infection. This is probably the reason why the author gave it up completely, mentioning in the 0.9.1 changelog:&nbsp;<em>“Build stub completely removed registry write operations”</em>&nbsp;Indeed by checking the code we can confirm that the relevant function is now absent.</p><p>In the earlier releases, Rhadamanthys used to create its mutex in a somewhat repeatable manner, based on a hash made of hardcoded values. This allowed researchers to create a universal vaccine (described in [<a href=\"https://go.recordedfuture.com/hubfs/reports/mtp-2024-0926.pdf\">4</a>]). Now, the author decided to evade this simple way of preventing the malware from running.</p><p>Since 0.9, the Rhadamanthys configuration (described further) includes a 16-byte seed value that participates in mutex name generation. It is hashed along with the magic&nbsp;. The first 16 bytes of the hash are then split into chunks and formatted into the Mutex name:</p><p>Possible format strings for the generation of mutexes:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\"Global\\MSCTF.Asm.{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}\"\n\"Session\\%u\\MSCTF.Asm.{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}\"\n\"MSCTF.Asm.{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}\"</pre><p>If creation of the first mutex option fails, the second is applied, with an index after “Session” that can be in the range 1-8.</p><p>Depending on the flags set in the configuration, the mutex can be passed into all the processes where Rhadamanthys injects its modules (by duplicating the handle). This feature is enabled by default and disabled if the flag&nbsp;&nbsp;or&nbsp;&nbsp;is set. Knowing this, we can search for the handle of the mutex in other processes, to check which belong to the same Rhadamanthys execution tree.</p><p>The main Rhadamanthys module is shipped with an obfuscated configuration, which is decrypted and parsed at the beginning of the execution. It contains the C2 address, encryption keys used along the way, and various flags that specify which features of the malware will be enabled or disabled. This configuration has evolved considerably across consecutive versions. The explanation of the used fields in a relatively new version (0.7) has been provided in [<a href=\"https://go.recordedfuture.com/hubfs/reports/mtp-2024-0926.pdf\">4</a>].</p><p>The magic&nbsp;&nbsp;(&nbsp;&nbsp;) has been used by this malware since the beginning of its existence. However, in the recent version 0.9.2, it is replaced with the&nbsp;&nbsp;DWORD (first noted&nbsp;<a href=\"https://x.com/Threatlabz/status/1950949733935223110\">here</a>). Also, the configuration content has been significantly extended.</p><p>The unpacked configuration, starting with&nbsp;&nbsp;markers, is not the final version but a compressed form. After the appropriate arguments are fetched, LZO decompression is applied. The result looks as follows:</p><p>While in the past the config allowed one C2 per sample, multiple options are now allowed. Example:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">hxxps://193.233.126.43/gateway/iesm4j25.s4pj7\nhxxps://193.23.216.48/gateway/iesm4j25.s4pj7</pre><p>Structure illustrating the new config (after decompression):</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">struct config_new\n{\n  DWORD flags;\n  DWORD unk0;\n  BYTE aes_iv[16];\n  BYTE mutex_seed[16];\n  BYTE unk1[18];\n  WORD padding;\n  BYTE urls[256];\n};</pre><p>As in the previous version, the configuration is stored in the main sample as a Base64 string, encoded with a custom charset. In the current version, the charset used is:&nbsp;<code>4NOPQRSTUVWXY567DdeEqrstuvwxyz-ABC1fghop23Fijkbc|lmnGHIJKLMZ089a</code>.</p><p>Layers of config deobfuscation before the&nbsp;&nbsp;config blob is obtained are:</p><ol><li>Base64 decoding with a custom charset</li><li>ChaCha20 decryption, using the key and the IV stored at the beginning of the obtained blob</li></ol><p>This model of configuration was also observed in the version 0.9, and 0.9.1. While 0.9.2 changed the marker to&nbsp;, the older variants continued to use the known&nbsp;.</p><p>The config contains the field&nbsp;&nbsp;values of which are used to off and on some possible execution paths. Overview:</p><figure><table><tbody><tr><td>init: the config was decrypted successfuly</td></tr><tr></tr><tr><td>close mutex (as in 0x40); use staging modules:&nbsp;,&nbsp;/&nbsp;</td></tr><tr><td>close mutex handle; do not pass the mutex to further injected processes</td></tr></tbody></table></figure><p>As mentioned earlier, the important modules of the malware are stored in an internal package and retrieved on demand.</p><p>The reconstructed package structure (Stage 2):</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">typedef struct DATA_DIR {\n    struct {\n        uint32_t header_rel_off;\n        uint32_t checksum;\n    };\n} _DATA_DIR;\n\ntypedef struct DATA_RECORD {\n    struct {\n        uint32_t size;\n        uint8_t offset[1];\n    };\n} _DATA_RECORD;\n\ntypedef struct PACKAGE {\n    uint32_t total_size;\n    uint16_t reserved;\n    uint16_t xor_key;\n    uint32_t dir_offset;\n    uint16_t data_offset;\n    uint8_t file_count;\n    uint8_t  blk_shift;\n    _DATA_DIR dir[1];\n} _PACKAGE;</pre><p>Whenever modules are about to be retrieved, the raw package, that is shipped as hardcoded in the initial executable, is first decrypted and decompressed. Each time it is done, a fresh XOR key is set for the obfuscation of the modules. We can observe this inside the &nbsp;function:</p><p>Once the key is generated, the decompressed content of the package is obfuscated, using a simple XOR-based obfuscation. This way, the authors try to minimize the content that is exposed to memory dumping tools.</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">void xor_based_enc_dec(\n    const uint8_t* src,\n    std::size_t size,\n    uint8_t* dst,\n    uint16_t key)\n{\n    for (std::size_t i = 0; i &lt; size; ++i) {\n        dst[i] = src[i] ^ static_cast&lt;uint8_t&gt;(key);\n        uint16_t lsb = key &amp; 1u;\n        key &gt;&gt;= 1;\n        if (lsb) key ^= 0xB400u;\n    }\n}</pre><p>The same XOR-based function is then used to reverse the obfuscation, when the individual module is about to be retrieved. It is done by the function denoted as&nbsp;.</p><p>The reconstructed algorithm () is given below:</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">BYTE* fetch_from_package(PACKAGE* pkg, uint32_t wanted_checksum, size_t&amp; out_size)\n{\n    BYTE* base_data = (BYTE*)&amp;pkg-&gt;dir_offset + pkg-&gt;data_offset;\n    size_t chunk_size = 2 &lt;&lt; pkg-&gt;blk_shift;\n\n    for (size_t i = 0; i &lt; pkg-&gt;file_count; i++) {\n        if (wanted_checksum != pkg-&gt;dir[i].checksum) continue;\n\n        std::cout &lt;&lt; std::dec &lt;&lt; i &lt;&lt; \"\\t Checksum: \" &lt;&lt; std::hex &lt;&lt; pkg-&gt;dir[i].checksum &lt;&lt; \"\\t\";\n        std::cout &lt;&lt; \"Offset: \" &lt;&lt; std::hex &lt;&lt; pkg-&gt;dir[i].header_rel_off &lt;&lt; \"\\n\";\n\n        DATA_RECORD* rec = (DATA_RECORD*)(reinterpret_cast&lt;ULONG_PTR&gt;(&amp;pkg-&gt;dir_offset) + pkg-&gt;dir[i].header_rel_off);\n\n        size_t chunks_count = rec-&gt;size / chunk_size;\n        if (rec-&gt;size % chunk_size) ++chunks_count;\n\n        BYTE* buf = (BYTE*)::calloc(rec-&gt;size, 1);\n        if (!buf) break;\n\n        size_t size_decoded = 0;\n        for (size_t j = 0; j &lt; chunks_count; j++) {\n            uint8_t offset = rec-&gt;offset[j];\n            size_t src_ofs = chunk_size * offset;\n\n            size_t curr_size = chunk_size;\n            size_t remaining = rec-&gt;size - size_decoded;\n\n            if (curr_size &gt; remaining) {\n                curr_size = remaining;\n            }\n            xor_based_enc_dec(&amp;base_data[src_ofs], curr_size, buf + size_decoded, pkg-&gt;xor_key);\n            size_decoded += curr_size;\n        }\n\n        out_size = size_decoded;\n        return buf;\n    }\n    return nullptr;\n}</pre><p>With the help of our decoder, once you dumped the decompressed package, you can automatically list all the included modules, and unpack them into separate files.</p><p>Although the names of modules are now not preserved, we were able to map modules to their previous names by comparing sizes and the common code pattern. The resulting listing is provided in the Appendix A.</p><p>The initial package, shipped in the sample, contains multiple modules that are dedicated to evasion. They are&nbsp;<a href=\"https://speakerdeck.com/hshrzd/rhadamanthys-and-the-40-thieves-the-nuts-bolts-and-lineage-of-a-multimodular-stealer?slide=42\">run before the connection to C2 is established</a>. One of them was previously named “Strategy”. Even though, since the recent changes, the name is no longer mentioned in the code, we will still use it to refer the corresponding module.</p><p>“Strategy” is responsible for extensive environment checks, and detecting if the sample is running in a controlled environment, such as a sandbox, or a machine with analysis tools. In the past releases, it was shipped alongside a single configuration file:&nbsp;, containing the list of forbidden processes to be detected. The file was read from the package, and passed as an argument to the Strategy’s Entry Point. Now the module and its flexibility has been extended. First of all, we no longer pass just the previously fetched list, but the fetching function itself, along with the package. Thanks to this, the Strategy module can load multiple pieces of the needed configuration on demand.</p><p>The first XS1 module (core), deploys Strategy passing to its Entry Point the pointer to the callback function, and the pointer to the package:</p><p>The Entry Point of the Strategy module is given below. The execution starts by using the callback function to retrieve the processes list:</p><p>After enumerating running processes, and checking them against the forbidden list, the module performs other interesting checks. For example, it gets the current wallpaper, calculates its SHA1, and compares it with the hardcoded one:&nbsp;<a href=\"https://www.virustotal.com/gui/file/16d5506b6663085b1acd80644ffa5363c158e390da67ed31298b85ddf0ad353f\"><code>5b94362ac6a23c5aba706e8bfd11a5d8bab6097d</code></a>&nbsp;that represents the default wallpaper of the&nbsp;<a href=\"https://tria.ge/\">Triage sandbox</a>. It then checks for the presence of several sample files that are used in some of the sandbox environments: “foobar.jpg”, “foobar.mp3”, “foobar.txt”, “foobar.wri”, “waller.dat”. It checks the current username with the list of usernames typical for sandboxes, such as: “JohnDeo” (likely a typo in “JohnDoe”), “HAL9TH”, “JOHN”, “JOHN-PC”, “MUELLER-PC”, “george”, “DESKTOP-B0T”. It searches for files such as “keys.txt”, “passwords.txt”, and checks if their content is the same by comparing hashes – this detects the presence of some dummy files that are common in sandboxes.</p><p>If all those checks passed, it finally proceeds to the newly added function. This function needs a deeper explanation. It makes use of two new configuration files that are fetched from the package and processed in the appropriate loops.</p><p>To understand the meaning of the first configuration file, we need to take a deeper look at how it is processed. Inside the loop, a function is called that generates UUIDs and fetches the node value from it. The API used is&nbsp;<a href=\"https://learn.microsoft.com/en-us/windows/win32/api/rpcdce/nf-rpcdce-uuidcreatesequential\"></a>, which means&nbsp;<a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"></a>&nbsp;is involved. This algorithm, defined by&nbsp;<a href=\"https://datatracker.ietf.org/doc/html/rfc4122\">RFC 4122</a>&nbsp;has an interesting feature. The last part of the structure,&nbsp;&nbsp;(48 bits)&nbsp;<strong>is a MAC address of a network interface</strong>. This was designed in 1980, where the focus on privacy was much lower than it is currently, and MAC addresses were used because of they were guaranteed to be unique for each physical device (assigned by IEEE). Therefore, including the MAC address was the easiest way to ensure no two machines could generate identical UUIDs. Nowadays, this algorithm is considered obsolete. The modern version, UUID v4, doesn’t involve MAC addresses. However, the old UUIDv1 is still available for backward compatibility. The malware uses it for easy and stealthy fetching of MAC addresses from the infected machine. Next, it compares it against the hardcoded list. The listed MAC addresses represent known virtual interfaces. Full listing extracted from the sample can be found&nbsp;<a href=\"https://gist.github.com/hasherezade/af11786a670c76b60ecd29de00d6d9b8#file-macs-txt\">here</a>.</p><p>The second configuration file contains another set of identifiers. This time they contain&nbsp;&nbsp;which will be compared against the HWID retrieved using a WQL query:&nbsp;. This is yet another way to detect known sandboxes. The full listing extracted from the sample can be found&nbsp;<a href=\"https://gist.github.com/hasherezade/af11786a670c76b60ecd29de00d6d9b8#file-uuids-txt\">here</a>.</p><p>When the malware beacons to its C2 server, it sends the Bot ID uniquely identifying the victim system. Currently, the bot ID is generated using two unique identifiers.</p><p>First, the malware retrieves a unique machine GUID from the from the registry:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography -&gt; MachineGuid</pre><p>They are hashed together, using the SHA1 algorithm. As the Bot ID is now strictly tied to those unique identifiers, it is easier for the attackers to blacklist some machines.</p><p>The ID is further represented as a hexadecimal string.</p><p>The same generator can be found in the Netclient (the element of Stage 2, responsible for the communication with the C2), as well as in the Stage 3 (the stealer core).</p><p>The JPG was used in earlier versions of Rhadamanthys (up to 0.4.5), and the WAV was in a regular use in more recent versions. A very good breakdown of the implementation details of how its steganography was implemented, was given by&nbsp;<a href=\"https://www.youtube.com/watch?v=W62Eb5oodEY\">Bea in her presentation at Botconf 2024</a>.</p><p>The Netclient module was significantly reworked since the latest version, 0.9.2. As before, the responsible function is installed as a callback fired up when a particular content type is encountered. This time, the expected type is&nbsp;:</p><p>The whole mechanism of decryption, and verification of the payload, is very similar to what we saw before. The main difference lies in how the input data is obtained. Previously, the bytes of the payload were hidden in some template file (JPG or WAV) that at first looked legitimate. A specific, custom steganogaphic algorithm was first used to grab the bytes interwoven in the media content. Now the author has given up the facade, and the data is stored right away as a pixels, following the structure:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">typedef struct png_data\n{\n    BYTE key_n[0x20];\n    BYTE key_e[0x20];\n    DWORD size;\n    BYTE hash[0x14];\n    BYTE data[1];\n}_png_data;</pre><p>It gives a noisy-looking image: unappealing comparing to the author’s earlier attempts at steganography, but good enough to do its job. Example:</p><p>As before, the decoding of the package from the PNG is not possible without the shared secret that is established during the communication with the C2. Therefore, we can’t simply decode the next stage from the PNG captured in the traffic.</p><p>Rhadamanthys downloads its final stage using the Netclient module, that is loaded into the initial process. The fetched data is decrypted locally, making it a second package with modules. However, further unpacking and loading is be done inside another process. As a cover, Rhadamanthys creates a legitimate process, which is first run in a suspended mode. The components needed to initiate the second part of the loading chain are implanted there.</p><p>In past releases, the list of the possible targets was hardcoded in the sample, and one of the options was picked randomly. Since the author introduces more and more configurability, now this list is also shipped in a new file of the package. It makes it easily modifiable by the distributors.</p><p>In the currently analyzed module, it contains the following options:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">%Systemroot%\\system32\\bthudtask.exe\n%Systemroot%\\system32\\dllhost.exe\n%Systemroot%\\SysWOW64\\dllhost.exe\n%Systemroot%\\system32\\taskhostw.exe\n%Systemroot%\\SysWOW64\\TsWpfWrp.exe\n%Systemroot%\\system32\\spoolsv.exe\n%Systemroot%\\system32\\wuaulct.exe\n%Systemroot%\\system32\\AtBroker.exe\n%Systemroot%\\SysWOW64\\AtBroker.exe\n%Systemroot%\\system32\\fontdrvhost.exe\n%Systemroot%\\SysWOW64\\TsWpfWrp.exe\n%Systemroot%\\SysWOW64\\xwizard.exe\n%Systemroot%\\SysWOW64\\msinfo32.exe\n%Systemroot%\\SysWOW64\\msra.exe</pre><p>The list is retrieved from the package. In two consecutive loops, the malware first checks which of the paths are accessible on the victim machine, and collects them in another list. That list is passed to the second loop, which randomly picks a path from the available options.</p><p>The old list of processes is still used as a backup. Therefore, if the names from the list are not found in the system, the malware tries to run one of the followings:</p><pre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\"%Systemroot%\\\\system32\\\\credwiz.exe\"\n\"%Systemroot%\\\\system32\\\\OOBE-Maintenance.exe\"\n\"%Systemroot%\\\\system32\\\\dllhost.exe\"\n\"%Systemroot%\\\\system32\\\\openwith.exe\"\n\"%Systemroot%\\\\system32\\\\rundll32.exe\"</pre><p>Diversification of the options creates another headache for incident responders.</p><p>Since version 0.5, the majority of the strings used by Rhadamanthys, especially in its core modules, are obfuscated (details: [<a href=\"https://research.checkpoint.com/2023/rhadamanthys-v0-5-0-a-deep-dive-into-the-stealers-components/\">2</a>]). The obfuscation scheme differs depending on the stage (XS1 vs XS2). To address this, we previously&nbsp;<a href=\"https://github.com/hasherezade/malware_analysis/tree/master/rhadamanthys/v0.5\">published two distinct IDA scripts</a>, one for each variant.</p><p>Reviewing the 0.9.x version, we found that one of the scripts needed modifications. Stage 2 (and the custom modules XS1_B) introduced no changes in string obfuscation – and our&nbsp;<a href=\"https://github.com/hasherezade/malware_analysis/blob/master/rhadamanthys/v0.5/ida_params3_xs1.py\">previously published IDA script</a>&nbsp;[<a href=\"https://research.checkpoint.com/2023/rhadamanthys-v0-5-0-a-deep-dive-into-the-stealers-components/\">2</a>] can still be applied. However, in Stage 3 (XS2_B modules), the algorithm was rewritten. The custom XOR-based algorithm was replaced with RC4.</p><p>The change doesn’t introduce any additional difficulty in decrypting it. It was probably added only to break existing tools, and disrupt the expected patterns. However, pinpointing the string deobfuscation functions is now more difficult, since they come as multiple different instances. In the past there were just two main string deobfuscation functions, one for ANSI, and another for Unicode strings. Once we identified them, and filled in their&nbsp;<a href=\"https://github.com/hasherezade/malware_analysis/blob/master/rhadamanthys/v0.5/ida_params3_xs2.py#L5\">expected names</a>&nbsp;in the IDB, we could quickly apply the script to deobfuscate all the strings.</p><p>Currently, finding all the instances requires a bit more effort. Just like in the past, ANSI strings are decoded by different functions than Unicode strings. But then there are other subtypes. In some of those functions, the encrypted string is passed via the first argument (we denote them as&nbsp;&nbsp;/&nbsp;), and others, it is passed via the second argument (we denote them as&nbsp;&nbsp;/&nbsp;).</p><p>Those functions may be called directly in the code, or used via various wrappers.</p><p>In order to decrypt all the strings, we have to find all the variants, and their wrappers.</p><p>We provide the updated decryption script, that can be used for XS2_B [<a href=\"https://gist.github.com/hasherezade/914ee14ca05e1f7c984b86ee4a0f74f2\">here</a>]. The script assumes that the deobfuscating functions in our IDB are renamed appropriately (as presented&nbsp;[<a href=\"https://gist.github.com/hasherezade/914ee14ca05e1f7c984b86ee4a0f74f2#file-ida_params3_xs2b_64-py-L8\">here</a>]).</p><p>A listing of the deobfuscated strings from the analyzed sample is available [<a href=\"https://gist.github.com/hasherezade/7f6008708dd4eecbebcb3c810c46f6e8\">here</a>].</p><p>Once the core stealer modules are downloaded and deployed, they carry out the main operations, and remain in communication with the C2 to upload the results, and receive commands. As in the previous Rhadamanthys variants, the communication is established via WebSocket, and uses the C2 address that is in the initial configuration.</p><p>Before the attempt to establish the connection to its C2, the sample queries the following services for the time, in random order:</p><pre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\"time.google.com\"\n\"time.cloudflare.com\"\n\"time.facebook.com\"\n\"time.windows.com\"\n\"time.apple.com\"\n\"time-a-g.nist.gov\"\n\"ntp.time.in.ua\"\n\"ts1.aco.net\"\n\"ntp1.net.berkeley.edu\"\n\"ntp.nict.jp\"\n\"x.ns.gin.ntt.net\"\n\"gbg1.ntp.se\"\n\"ntp1.hetzner.de\"\n\"ntp.time.nl\"\n\"pool.ntp.org\"</pre><p>This was added in the recent editions of Rhadamanthy (0.9.x) and was not seen in earlier releases.</p><p>An interesting detail added in the latest version in Rhadamanthys is, that the URL from the configuration is further processed. First, the following algorithm is used to generate a random string:</p><pre data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">void generate_domain_str(char *buf, size_t max) {\n    srand(time(0));\n    rand();\n    for (size_t i = 0; i &lt; max; i++)\n    {\n        int rval = rand();\n        BYTE c = rval\n            - 0x1A\n            * (((((unsigned __int64)(0x4EC4EC4FLL * rval) &gt;&gt; 0x20)\n                &amp; 0x80000000) != 0LL)\n                + ((int)((unsigned __int64)(0x4EC4EC4FLL * rval) &gt;&gt; 0x20) &gt;&gt; 3))\n            + 0x61;\n        buf[i] = c;\n    }\n}</pre><p>When this algorithm is applied, the domain from the config is partially overwritten by the random content. The length of the URL before the first “/” (i.e.&nbsp;denoting the IP and the port) is used as the length of the new string. Next, the ‘.’ is inserted two characters before the new string end, making it look like a domain.</p><p>Examples of the transformations:</p><ul><li><code>192.30.242[.]210:8888/gateway/qq7o8k3h.fnliq</code>&nbsp;→&nbsp;<code>hxxps://mohbskyjlaztloar.dq/gateway/qq7o8k3h.fnliq</code></li><li><code>193.84.71[.]81/gateway/wcm6paht.htbq1</code>&nbsp;→&nbsp;<code>hxxps://jvmhnrlbt.xf/gateway/wcm6paht.htbq1</code></li></ul><p>At first it looks like DGA, however, the generated domains do not resolve, and they are too random to really be used. The generation algorithm makes the output sensitive not just to a different date, but it changes every second.</p><p>The address of the C2 that we can observe in the network communication is still the same as the one in the config.</p><p>It is possible that the authors added it just as an additional confusion.</p><p>Since its early releases, Rhadamanthys core stealer comes with a built-in Lua runner. It serves additional stealer plugins written in this language.</p><p>All available Lua stealers (in 0.9.1):</p><ul><li>FTP\n<ul><li>– CoreFTP – CuteFTP – Cyberduck – Filezilla – FlashFXP – FtpNavigator – FTPRush – SSH – SmartFTP – Total Commander – WinSCP – putty</li></ul></li><li>Mail\n<ul><li>– CheckMail – Clawsmail – EMClient – Foxmail – GmailNotifierPro – Outlook – TheBat – TrulyMail – ThunderBird</li></ul></li><li>Messenger\n<ul><li>– Discord – Telegram – Pidgin – Psi+ – Tox</li></ul></li><li>Notes\n<ul><li>– Stickynotes – Notefly – Notezilla</li></ul></li><li>VPN\n<ul><li>– OpenVPN – OpenVPN Connect – AzireVPN – NordVPN – PrivateVPN – ProtonVPN – WindscribeVPN</li></ul></li><li>2FA\n<ul><li>– Authy Desktop – RoboForm</li></ul></li><li>Misc\n<ul><li>– TeamViewer – WebCredential – WindowsCredential</li></ul></li><li>Wallet\n<ul><li>– Armory – Atomex.me – Atomicdex – AtomicWallet – BinanceWallet – BitcoinCore – Bither – ByteCoin – Coinomi – DashCore – Defichain-Electrum – Dogecoin – Electron-Cash – Electrum-LTC – Electrum-SV – Electrum – Exodus – Frame – Guarda – Jaxx – Litecoin – LitecoinCore – Monero – MyCrypto – MyMonero – Qtum-Electrum – Qtum – Safepay – Solar Wallet – TokenPocket – WalletWasabi – Zap – Zecwallet Lite</li></ul></li></ul><pre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">local files = {}\nlocal file_count = 0\nif not framework.flag_exist(\"W\") then\n    return\nend\nlocal paths = {\n    framework.parse_path([[%AppData%\\Ledger Live]]),\n    framework.parse_path([[%LOCALAppData%\\Ledger Live]])\n}\nfor i, path in ipairs(paths) do\n    if path ~= nil and framework.path_exist(path) then\n        local offset = string.len(path) + 2\n        framework.fs_search(path, function(entry)\n            local name = string.sub(entry.Filename, offset)\n            files[name] = entry.Filename\n            file_count = file_count + 1\n        end,true)\n        if file_count &gt; 0 then\n            break\n        end\n    end\nend\nif file_count &gt; 0 then\n    for k, v in pairs(files) do\n        framework.add_file(k, v)\n    end\n    framework.set_commit(\"!CP:LedgerLive\")</pre><p>In the latest releases, the package at Stage 3 was enriched with few more modules. They are:</p><ul></ul><p>The most interesting one is&nbsp;&nbsp;. It is a JavaScript, which starts with the following comment:&nbsp;<code>Browser Fingerprint Export Tool ; Used to collect browser fingerprint information and export as JSON</code>. It is meant to be opened by a browser and collect a variety of information about its configuration. The main function of the script is called asynchronously and it collects all the information into a JSON report:</p><pre data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">async function main() {\n    try {\n      const fingerprint = await collectAllFingerprints();\n\n      await fetch('/p/result', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(fingerprint)\n      });\n    } catch (error) {\n\n      console.error('Fingerprint collection or send error:', error);\n    }\n  }</pre><p>The function that does the data collection comes with extensive comments, showing what type of data we can expect to be gathered.</p><pre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">  // Collect all fingerprint information\n  async function collectAllFingerprints() {\n    const fingerprint = {\n      // Timestamp\n      timestamp: new Date().toISOString(),\n      // Basic system info\n      system: await collectSystemInfo(),\n      // Browser info\n      browser: collectBrowserInfo(),\n      // WebGL info\n      webgl: await collectWebGLInfo(),\n      // Canvas info\n      canvas: await collectCanvasInfo(),\n      // Network info\n      network: await collectNetworkInfo(),\n      // Screen info\n      screen: collectScreenInfo(),\n      // Hardware info\n      hardware: collectHardwareInfo(),\n      // Language info\n      language: collectLanguageInfo(),\n      // Fonts info\n      fonts: await detectAvailableFonts(),\n      // WebRTC info\n      webrtc: await getWebRTCInfo(),\n      // Web Audio info\n      audio: await getWebAudioInfo(),\n      // Miscellaneous features\n      misc: collectMiscFeatures()\n    };\n    return fingerprint;\n  }</pre><p>Once this script is deployed, it allows the attackers to grab additional information about the browsers installed on the victim system, and their settings. For example, it allows to list all the plugins installed, and checks if the following features are enabled:</p><ul></ul><p>It also pinpoints the precise product version and build.</p><p>The  is very simple, and seems to be used just as a carrier where the&nbsp;&nbsp;will be embedded:</p><pre data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script src=\"/p/fp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt; </pre><p>Rhadamanthys looked mature from the start, given that its codebase draws heavily from the authors’ earlier project, Hidden Bee. Its initial development was fast-paced, as the authors invested heavily in rapid feature growth to gain momentum and attract customers. They kept reworking the codebase, introduced extensions and add-ons that increased flexibility, allowing customization for diverse use cases. Currently, the development is slower and steadier: the core design remains intact, with changes focused on refinements – such as new stealer components, changes in obfuscation, and more advanced customization options.</p><p>The latest variant represents an evolution rather than a revolution. Analysts should update their config parsers, monitor PNG-based payload delivery, track changes in mutex and bot ID formats, and expect further churn in obfuscation as tooling catches up. If this trajectory continues, a future 1.0 release may emphasize stability and professionalization, further cementing Rhadamanthys as a long-term player in the stealer ecosystem.</p><p>Check Point Threat Emulation and Harmony Endpoint provide comprehensive coverage of attack tactics, file types, and operating systems and protect against the attacks and threats described in this report.</p><ul><li>8f54612f441c4a18564e6badf5709544370715e4529518d04b402dcd7f11b0fb (packed, Golang packer)</li><li>b429a3e21a3ee5ac7be86739985009647f570548b4f04d4256139bc280a6c68f</li><li>b41fb6e936eae7bcd364c5b79dac7eb34ef1c301834681fbd841d334662dbd1d</li><li>eb5558d414c6f96efeb30db704734c463eb08758a3feacf452d743ba5f8fe662&nbsp;– packed\n<ul><li>1f7213a32bce28cb3272ef40a7d63196b2e85f176bcfe7a2d2cd7f88f4ff93fd – unpacked payload</li></ul></li><li>c19716b262e928d83252d75a1ff262786df6cbb221132a0ada08ef3293c091b7 (unpacked)</li><li>84bbe70b3089e578d69744bd8b030c3a6e724a6c3f4bdefda82fe5057f89c9ba (unpacked)</li><li>a451cbfe093830cd4d907d10bc0f27ea51da53ece5456af2fe6b3b24d3df163e (packed)\n<ul><li>23a57ba898b5e91a2ead4e93c97710fe91dc917a7d11dc44b41304778565905f (unpacked)</li><li>URL:&nbsp;<code>hxxps://193.84.71.81/gateway/wcm6paht.htbq1</code></li></ul></li></ul><p><em>The modules marked by bold font are the ones introduced in the current release. The modules marked italic didn’t change since the previous release.</em></p><p>Stage 2 [32] – Unpacked from the hardcoded package (set extracted from a 32-bit sample) ; Rhadamanthys 0.9.2</p><figure><table><thead><tr><th>Name (by previous notation) or functionality</th></tr></thead><tbody><tr><td>cb0662d468b034530f88dee9204b3a1d3ff04d19345f417b2cce92a1940dc991</td><td>[core] – first module of Stage 2</td></tr><tr><td>a905226a2486ccc158d44cf4c1728e103472825fb189e05c17d998b9f5534d63</td></tr><tr><td>cb555f5cb3e40c4db0fba7953ffc56e978a599233f80512e019e4c94fd69892c</td></tr><tr><td>090b0ef20633785d11096cda04d9764bd46c9f5d9d3c02183009d2bf165abb82</td></tr><tr><td>b43d35a26681c7f214ce3bd90af35bc3272008c169c5b1b4e7e6af7398e3e3c4</td></tr><tr><td>0500bd111464a1376e7efba2376eb1192cb4beb18278f62e460c8c8191f0cc5d</td><td>the list of HWIDs (used by strategy)</td></tr><tr><td><em>aeba4ece8c4bf51d9761e49fad983967e76c705a06999c556c099f39853f737c</em></td></tr><tr><td><em>3ca87045da78292a6bba017138ff9ee42b4e626b64d0fee6d86a16cc3258c8c3</em></td><td>processes.x (list of forbidden processes)</td></tr><tr><td>cbca01435be6348ce4c58cc86c2900f3d99dc806ea38dbdfbb8d6291af17fce4</td></tr><tr><td><strong>24ddfd61c05b2f772caf85b44e9e58363a0cf345c6a9294a8416617f0b5b03cf</strong></td><td><strong>executables to impersonate (list of options)</strong></td></tr><tr><td>59722b8869d17c5a805dd9febe70295b78afd53e4f3b0e26cd76ea1e772e6818</td></tr><tr><td>6415c029d241255bffaf057a8f1390b626c8069ba9a1432f0e8372c7ab68778a</td></tr><tr><td>67f00a03e76308a399f21498ebdd4accdb1879c908960e60f717e6d3cb9d05cf</td></tr><tr><td>d8d2bae5ec1ade8770ad2d6fc323b2ccc459919643cbe8d67e6a5b11094a4d85</td></tr><tr><td>0fc149c1ed4a1040b9cf68076c17c4d005a121aca0a22385458a1980f7d24589</td></tr><tr><td>11aabefa4eac0c2f22d0b2efdb7facd242d52765fe5167523112b980f096d9d1</td><td>the list of MAC addresses (used by strategy)</td></tr></tbody></table></figure><p>Stage 2 [64] – Unpacked from the hardcoded package (set extracted from a 64-bit sample) ; Rhadamanthys 0.9.2</p><figure><table><thead><tr><th>Name (by previous notation) or functionality</th></tr></thead><tbody><tr><td>cbdb3d2e0a845b134576fabcc2260aa5bd995b9f3b43483ab704c6787409012d</td><td>[core] – first module of Stage 2</td></tr><tr><td>3419dc2a3fb5bdba7f5d51634109066b0ceaeeae898a6748ce9eeaeb63fd1fb0</td></tr><tr><td>9d110b4e129be5d80253c4d890757f81c5135dcf6d1bbf0262fb554f0c885720</td></tr><tr><td>a9932ada2cf6bfb2614080e9a0068af03ee919657f16ef50d256fccd74ee2d44</td></tr><tr><td>41daeb92734388f9133a007cbc9c4d8058092b9d8192734be70b3106f0ca5d9f</td></tr><tr><td>0500bd111464a1376e7efba2376eb1192cb4beb18278f62e460c8c8191f0cc5d</td><td>the list of HWIDs (used by strategy)</td></tr><tr><td><em>aeba4ece8c4bf51d9761e49fad983967e76c705a06999c556c099f39853f737c</em></td></tr><tr><td><em>3ca87045da78292a6bba017138ff9ee42b4e626b64d0fee6d86a16cc3258c8c3</em></td><td>processes.x (list of forbidden processes)</td></tr><tr><td><strong>24ddfd61c05b2f772caf85b44e9e58363a0cf345c6a9294a8416617f0b5b03cf</strong></td><td><strong>executables to impersonate (list of options)</strong></td></tr><tr><td>4ec1902e8cd21d2d5a65465111a1883920bb6c898189dac34d618766b1c4fa66</td></tr><tr><td>ad5ecfda322ac8fdde40f3ee57273abae35b5eb6ca96f2df0a91b8059e75d022</td></tr><tr><td>df24d62310c018ba8817f0b70788e6bec546f234bb56116f90bf5b7f19c87901</td></tr><tr><td>11aabefa4eac0c2f22d0b2efdb7facd242d52765fe5167523112b980f096d9d1</td><td>the list of MAC addresses (used by strategy)</td></tr></tbody></table></figure><p>Stage 3 – Downloaded from the C2:</p><pre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">├── bin\n│&nbsp;&nbsp; ├── amd64\n│&nbsp;&nbsp; │&nbsp;&nbsp; ├── coredll.bin\n│&nbsp;&nbsp; │&nbsp;&nbsp; ├── imgdat.bin\n│&nbsp;&nbsp; │&nbsp;&nbsp; ├── stubmod.bin\n│&nbsp;&nbsp; │&nbsp;&nbsp; └── taskcore.bin\n│&nbsp;&nbsp; ├── i386\n│&nbsp;&nbsp; │&nbsp;&nbsp; ├── coredll.bin\n│&nbsp;&nbsp; │&nbsp;&nbsp; ├── stubmod.bin\n│&nbsp;&nbsp; │&nbsp;&nbsp; └── taskcore.bin\n│&nbsp;&nbsp; ├── KeePassHax.dll\n│&nbsp;&nbsp; ├── loader.dll\n│&nbsp;&nbsp; └── runtime.dll\n└── etc\n    ├── bip39.txt\n    ├── chrome_extension.dat\n    ├── fingerprint.js\n    └── index.html</pre><figure><table><thead><tr></tr></thead><tbody><tr><td>271452e1c5e79d159f79886a65d4180814a7329c092d617372f127b6311d60f1</td></tr><tr><td>ae26068833a65197c5ff2440d8ca06db393823ee1b5130dbf00d90da2120bf01</td></tr><tr><td>59920d1fc7facb5b3b06b93da5b8ee3cbb15acb75f2bb36536e35b803a1f2222</td></tr><tr><td>5a747f6d9d818fcfd90e0ff1ca393321ab7e10314f71e9db01cb1f451258f257</td></tr><tr><td>8c12af846fc774e02dc5ec358f0a9fa7363538cef541e95ac65331ec18fbbe0b</td></tr><tr><td>36dd78abc304bd2cfbfc188a0b47320e3a4393f03657d69796a5616e3dac50c8</td></tr><tr><td>d14d10fdcd7a6f0c095e2bb525fe21d8970c508c0475913bd9bd1c96067bcb04</td></tr><tr><td><em>fcb00beaa88f7827999856ba12302086cadbc1252261d64379172f2927a6760e</em></td></tr><tr><td>7acae2490a0ff1ae3a31f89346fe4e0630259a344c2a6f38bf75f34f8fe9987e</td></tr><tr><td>b8cbb2a7270ac21c3e895f1b4965b1a17d7a1a6ea54c2c8ef19df49a26442779</td></tr><tr><td><em>24ce42c2fd4a95c1b86bbee9bce1e1cf255bd0022e19bab6bd591afd68b7efdb</em></td></tr><tr><td><strong>71ccf996f6ad9ac4ed001d3570de6754f7e26a846ed19b34e9b3b1b58abfe619</strong></td></tr><tr><td><strong>4f88d5cb69d44144b02f7ffd3d45cd86aaee12c3410898ce83712287a6b27fe4</strong></td></tr><tr><td>b25d958bd91f85c14ca451dd6dbcea58507c8e92466f48cd2d2e04cef9d371af</td></tr><tr></tr></tbody></table></figure>","contentLength":45993,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"CrowdStrike&rsquo;s Fall 2025 Release Defines the Agentic SOC and Secures the AI Era","url":"https://www.crowdstrike.com/en-us/blog/crowdstrike-fall-2025-release-defines-agentic-soc-secures-ai-era/","date":1759302000,"author":"CrowdStrike","guid":272,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"ISC Stormcast For Wednesday, October 1st, 2025 https://isc.sans.edu/podcastdetail/9636, (Wed, Oct 1st)","url":"https://isc.sans.edu/diary/rss/32336","date":1759284002,"author":"","guid":350,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"&#x5b;Guest Diary&#x5d; Comparing Honeypot Passwords with HIBP, (Wed, Oct 1st)","url":"https://isc.sans.edu/diary/rss/32310","date":1759273271,"author":"","guid":349,"unread":true,"content":"<article>[This is a Guest Diary by Draden Barwick, an ISC intern as part of the SANS.edu Bachelor's Degree in Applied Cybersecurity (BACS) program [1].]</article>","contentLength":143,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Tile trackers plagued by weak security, researchers warn","url":"https://www.malwarebytes.com/blog/news/2025/09/tile-trackers-plagued-by-weak-security-researchers-warn","date":1759247208,"author":"","guid":109,"unread":true,"content":"<p>Researchers at the Georgia Institute of Technology scrutinized the security of the popular Tile tracker and came out disappointed.</p><p>Bluetooth trackers are a steadily growing market, and Life360 is one of the major players. In 2021, Amazon expanded its <a href=\"https://www.amazon.com/Amazon-Sidewalk/b/?node=21328123011\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Sidewalk</a> network to include Tile. That means Ring cameras and Echo devices can act as relays, picking up the location of Tile trackers and phones running the Tile app.</p><p><a href=\"https://www.wired.com/story/tile-tracking-tags-can-be-exploited-by-tech-savvy-stalkers-researchers-say\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Reportedly</a>, some 88 million Tile trackers are in use worldwide, but researchers reported that Tile trackers were not as safe as they hoped. The major problem the researchers found is that the trackers broadcast an unencrypted, static MAC address and unique ID. To allow users to find their wallet or lost items, other Bluetooth devices or radio-frequency antennas in a tracker’s vicinity can pick up these signals to follow the movements of the tracker.</p><p>That’s the whole point, you’d think. But let me clarify what’s wrong with this method. </p><p>Other trackers don’t broadcast their actual MAC address. Instead, they send out a temporary ID based on it, which makes long-term tracking harder. Tile does things differently: while it rotates the unique ID, it still transmits the same MAC address. Researchers also found the rotating ID generation was weak and could allow continuous tracking.</p><p>The receiver then sends the tracker’s location, MAC address, and unique ID to a server without encryption. The researchers believed the server stored this information in cleartext, which would mean Life360 could continuously monitor the location of trackers and their owners who have the app installed.</p><p>As one of the researchers put it while warning about the dangers:</p><blockquote><p>“An attacker only needs to record one message from the device … to fingerprint it for the rest of its lifetime.”</p></blockquote><p>This could pose a major problem in case of <a href=\"https://www.life360.com/nl-nl/blog/unauthorized-access-incident-2024\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">a breach</a> or if your tracker was caught in a mass scan. In other tracker systems, the information about the location of a tag is decrypted by using a key only available on the user’s phone, so only the owner can see this information.</p><p>Another issue is Tile’s anti-stalking feature. After concerns were <a href=\"https://www.malwarebytes.com/blog/news/2022/05/airtag-stalking-what-is-it-and-how-can-i-avoid-it\" target=\"_blank\" rel=\"noreferrer noopener\">raised</a> about the ability to stalk persons with these trackers, most manufacturers added automatic alerts that warn the user if a tracker that is not theirs is following them around.</p><p>With Tile, the app doesn’t scan in the background—the user has to start the scan manually. Even then, it only works if the user keeps moving around for 10 minutes.</p><p>This behavior could be due to a feature that Tile offers and others don’t: anti-theft mode. Tile users have the ability to make their trackers invisible to others, so would-be thieves can’t scan an area to see if there are any items with a Tile in the vicinity.</p><p>But stalkers could abuse the same feature. They would still see the tag’s location, while the victim’s scan would not detect it, leaving them unaware of a rogue device.</p><p>To enable Anti-Theft Mode, Tile requires a government-issued ID, a live photo of the user, and agreement to a $1 million fine if convicted of stalking. While this could deter some abusers, researchers note it isn’t clear whether the penalty is enforceable.</p><p>The researchers concluded that many of the problems they found with Tile trackers could be solved by encrypting the signals it broadcasts, and they didn’t understand why the company apparently hadn’t followed the example of its competitors.</p><p>That sounds easier than it might be though. In February 2025, researchers found a way to track any Bluetooth device using <a href=\"https://cec.gmu.edu/news/2025-02/find-my-hacker-how-apples-network-can-be-potential-tracking-tool\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">nRootTag vulnerability in the “Find My” network</a>. Apple has a partial fix out, but full protection may take years. This shows that a redesign from (almost) scratch could be a lengthy and costly process.</p><p>In a <a href=\"https://www.theverge.com/news/787836/tile-trackers-stalking-research-unencrypted\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">statement</a> to The Verge, a spokesperson for Life360 said the company had “made a number of improvements” since researchers reported the issue last November, although didn’t provide any details about the fixes. From the statement:</p><blockquote><p>Using a Tile to track someone’s location without their knowledge is never okay and is against our terms of service.</p></blockquote><p>To help you find the main differences between Tile and other trackers, we constructed this overview.</p><figure><table><tbody><tr><td>Uses static MAC addresses, enabling persistent tracking by anyone nearby.</td><td>Uses rotating MAC addresses that change frequently to prevent tracking.</td></tr><tr><td>Broadcasts unique IDs and device data unencrypted via Bluetooth, which is easily intercepted.</td><td>Uses encrypted communication with nearby devices, protecting data in transit.</td></tr><tr><td>Stores location and device data unencrypted on own servers, making it vulnerable to breaches.</td><td>Stores encrypted data on servers, reducing risk from breaches.</td></tr><tr><td>Detection of unwanted trackers</td><td>Requires users to manually scan with Tile app’s Scan and Secure feature, which is less intuitive.</td><td>Automatically alerts users of unknown trackers traveling with them and provides disabling them.</td></tr><tr><td>Offers “anti-theft mode,” which hides trackers from detection scans, but which makes automatic stalking alerts ineffective.</td></tr></tbody></table></figure><p><strong>We don’t just report on privacy—we offer you the option to use it.</strong></p>","contentLength":5105,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"\"user=admin\". Sometimes you don't even need to log in., (Tue, Sep 30th)","url":"https://isc.sans.edu/diary/rss/32334","date":1759244541,"author":"","guid":348,"unread":true,"content":"<article>One of the common infosec jokes is that sometimes, you do not need to \"break\" an application, but you have to log in. This is often the case for weak default passwords, which are common in IoT devices. However, an even easier method is to tell the application who you are. This does not even require a password! One of the sad recurring vulnerabilities is an HTTP cookie that contains the user's username or userid.</article>","contentLength":415,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Apple fixes critical font processing bug. Update now!","url":"https://www.malwarebytes.com/blog/news/2025/09/apple-fixes-critical-font-processing-bug-update-now","date":1759230078,"author":"","guid":108,"unread":true,"content":"<p>Apple has released important security updates to address a critical vulnerability in—the part of MacOS/iOS/iPadOS that processes fonts.</p><p>Identified as CVE-2025-43400, the flaw was discovered internally by Apple and allows an attacker to craft a malicious font that can cause apps to crash or corrupt process memory, potentially leading to arbitrary code execution.</p><p>While Apple hasn’t said it’s being actively exploited, similar bugs have been used in jailbreaks and spyware attacks in the past, so it’s smart to patch it promptly.</p><h2>How to update your devices</h2><h3><strong>How to update your iPhone or iPad</strong></h3><p>For iOS and iPadOS users, you can check if you’re using the latest software version, go to&nbsp;<strong>Settings &gt; General &gt; Software Update</strong>. It’s also worth turning on Automatic Updates if you haven’t already. You can do that on the same screen.</p><h3><strong><strong>How to update macOS on any version</strong></strong></h3><p>To update macOS on any supported Mac, use the Software Update feature, which Apple designed to work consistently across all recent versions. Here are the steps:</p><ul><li>Click the Apple menu in the upper-left corner of your screen.</li><li>Choose&nbsp;&nbsp;(or&nbsp;&nbsp;on older versions).</li><li>Select&nbsp;&nbsp;in the sidebar, then click&nbsp;&nbsp;on the right. On older macOS, just look for&nbsp;&nbsp;directly.</li><li>Your Mac will check for updates automatically. If updates are available, click&nbsp;&nbsp;(or&nbsp;&nbsp;for major new versions) and follow the on-screen instructions. Before you upgrade to macOS Tahoe 26, please read these&nbsp;<a href=\"https://support.apple.com/en-us/122727\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">instructions</a>.</li><li>Enter your administrator password if prompted, then let your Mac finish the update (it might need to restart during this process).</li><li>Make sure your Mac stays plugged in and connected to the internet until the update is done.</li></ul><h3><strong>How to update Apple Watch</strong></h3><ul><li>Ensure your iPhone is paired with your Apple Watch and connected to Wi-Fi.</li><li>Keep your Apple Watch on its charger and close to your iPhone.</li><li>Open the&nbsp;Watch&nbsp;app on your iPhone.</li><li>Tap&nbsp;<strong>General&nbsp;&gt;&nbsp;Software Update</strong>.</li><li>If an update appears, tap&nbsp;.</li><li>Enter your iPhone passcode or Apple ID password if prompted.</li></ul><p>Your Apple Watch will automatically restart during the update process. Make sure it remains near your iPhone and on charge until the update completes.</p><ul><li>Turn on your Apple TV and make sure it’s connected to the internet.</li><li>Open the&nbsp;Settings&nbsp;app on Apple TV.</li><li>Navigate&nbsp;<strong>to&nbsp;System&nbsp;&gt;&nbsp;Software Updates</strong>.</li><li>If an update appears, select&nbsp;.</li></ul><p>The Apple TV will download the update and restart as needed. Keep your device connected to power and Wi-Fi until the process finishes.</p><h2>Updates for your particular device</h2><figure><table><tbody><tr><td><strong>Name&nbsp;and&nbsp;information&nbsp;link</strong></td></tr><tr><td>iPhone 11 and later, iPad Pro 12.9-inch 3rd generation and later, iPad Pro 11-inch 1st generation and later, iPad Air 3rd generation and later, iPad 8th generation and later, and iPad mini 5th generation and later</td></tr><tr><td>iPhone XS and later, iPad Pro 13-inch, iPad Pro 12.9-inch 3rd generation and later, iPad Pro 11-inch 1st generation and later, iPad Air 3rd generation and later, iPad 7th generation and later, and iPad mini 5th generation and later</td></tr><tr><td>watchOS 26.0.2 no published CVE entries.</td><td>Apple Watch Series 6 and later</td></tr><tr><td>tvOS 26.0.1 no published CVE entries.</td><td>Apple TV HD and Apple TV 4K (all models)</td></tr></tbody></table></figure><p>The vulnerability tracked as <a href=\"https://www.cve.org/CVERecord?id=CVE-2025-43400\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">CVE-2025-43400</a> was described as an out-of-bounds write issue in FontParser that, when exploited, could cause the processing of a maliciously crafted font to lead to unexpected app termination or corrupt process memory.</p><p>An out-of-bounds write vulnerability means that the attacker can manipulate parts of the device’s memory that should be out of their reach. Such a flaw in a program allows it to read or write outside the bounds the program sets, enabling attackers to manipulate other parts of the memory allocated to more critical functions. Attackers can write code to a part of the memory where the system executes it with permissions that the program and user should not have.</p><p>Typically, fonts are safe and standardized files used daily in countless apps and websites, but due to this vulnerability an attacker can create a specially crafted font file containing manipulated data that exploits vulnerabilities in the font processing engine of the operating system. When this malicious font is loaded by an app or system process, it can trigger memory corruption or crashes. In worst-case scenarios, this can enable attackers to execute harmful code remotely, gaining control over the device.</p><p>Given that fonts are widely used and often processed silently in the background, font vulnerabilities pose a significant risk vector for attackers aiming to compromise devices.</p><p><strong>We don’t just report on phone security—we provide it</strong></p>","contentLength":4555,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"260 romance scammers and sextortionists caught in huge Interpol sting","url":"https://www.malwarebytes.com/blog/news/2025/09/260-romance-scammers-and-sextortionists-caught-in-huge-interpol-sting","date":1759228449,"author":"","guid":107,"unread":true,"content":"<p>Online crime of all kinds is deplorable, but romance scammers and sextortionists who target the most vulnerable victims are among the worst. Now, there’s likely a place for 260 of them in jail, thanks to international law enforcement.</p><p>Interpol’s Operation Contender 3.0 targeted alleged criminals from several countries across Africa. It arrested 260 people and captured 1,235 electronic devices. Investigators linked 1,463 victims to the scams, and said their losses amounted to around $2.8 million.</p><p>The <a href=\"https://www.interpol.int/News-and-Events/News/2025/260-suspected-scammers-arrested-in-pan-African-cybercrime-operation\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">images</a> from Interpol’s press release tell just as lurid a story as the numbers do. In one, over 30 phones lie on a table, each with a different case. These were the devices that the scammers likely used to carry out their crimes, which focused on romance scams and extortion.</p><p>Criminals lured victims with fake online identities built from stolen photos and forged documents, then exploited victims through romance scams that demanded bogus courier or customs fees. Others ran sextortion schemes, secretly recording explicit video chats to extort money.</p><p>Romance scams are all too familiar to those in the know, but still catch out plenty of lonely people looking for affection online. A criminal half a world away will get to know a victim, often beginning the relationship via an ‘accidental’ text message, or via a dating site or social media. A fake social media account, usually with a stolen photo, lends them credibility. They will gradually get to know the victim, luring them into what seems like a romantic relationship. If you’re talking to someone who claims to be in the military and therefore unable to travel, be very wary. This is a common scam tactic.</p><p>Eventually the request for money will come, in some form or other. In some scams, it’ll be a recommendation to invest in a fraudulent investment scheme (this used to be called ‘pig butchering’ but now Interpol <a href=\"https://www.interpol.int/News-and-Events/News/2024/Words-matter-changing-the-language-of-online-fraud\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">prefers</a> the more humane term ‘romance baiting’).</p><p>In other variations of the scam, there will be a plan to visit the victim – except, of course, there’s some financial hurdle that the perpetrator must overcome before they can travel. If the victim sends the money, the requests will keep coming, always with another excuse for why they can’t make the trip just yet. </p><p>Talking with someone you’ve never met who’s asking for financial help with a medical emergency, or to solve a legal or business issue? Think twice before sending the funds. Then think a third time. Then don’t do it.</p><p>In an era where people are <a href=\"https://www.hhs.gov/sites/default/files/surgeon-general-social-connection-advisory.pdf\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">increasingly lonely</a>, romance scams are a surprisingly effective tactic. Americans <a href=\"https://public.tableau.com/app/profile/federal.trade.commission/viz/shared/4WS8HTYQ6\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">lost $1.2 billion</a> to romance scammers last year, with medium losses hitting $2,000.</p><p>The extortion side of things is even more horrid. People aren’t just lonely these days; they’re lusty. That leads to many people doing things online with strangers that they shouldn’t, including sharing intimate images or videos of themselves. Once a criminal has those assets, they can use them to extort the victims by threatening to send the material to their friends, family, and professional contacts. </p><p>Romance scams and other forms of financial fraud can come from anywhere, including in your own country. But Africa does seem to be a hotbed for it. Last year’s <a href=\"https://www.interpol.int/News-and-Events/News/2025/New-INTERPOL-report-warns-of-sharp-rise-in-cybercrime-in-Africa\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Interpol Africa Cyberthreat Assessment Report</a> found that cybercrime accounted for 30% of all reported crime in Western and Eastern Africa. Criminals engage in many kinds of digital crime, according to the report, including business email compromise and banking malware, but online scams are especially popular—as is digital sextortion and harassment.</p><p>Interpol <a href=\"https://www.interpol.int/News-and-Events/News/2024/Arrests-in-international-operation-targeting-cybercriminals-in-West-Africa\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">arrested</a> eight people a year ago in Nigeria and Côte d’Ivoire for financial fraud including romance scams as part of its Contender 2.0 operation. And in 2022, it <a href=\"https://www.interpol.int/News-and-Events/News/2022/Financial-crime-South-African-fraud-gang-dismantled\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">dismantled</a> a South African gang for swindling companies, but also suspected it of being involved in romance scams.</p><p><strong>We don’t just report on scams—we help detect them</strong></p><p>Cybersecurity risks should never spread beyond a headline. If something looks dodgy to you, check if it’s a scam using Malwarebytes Scam Guard, a feature of our mobile protection products. Submit a screenshot, paste suspicious content, or share a text or phone number, and we’ll&nbsp;tell you if it’s a scam or legit. Download<a href=\"https://app.malwarebytes.com/AgCJ/grb5w2g1\" target=\"_blank\" rel=\"noreferrer noopener\"> Malwarebytes Mobile Security for iOS or Android</a> and try it today!</p>","contentLength":4344,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Phantom Taurus: A New Chinese Nexus APT and the Discovery of the NET-STAR Malware Suite","url":"https://unit42.paloaltonetworks.com/phantom-taurus/","date":1759226434,"author":"Lior Rochberger","guid":124,"unread":true,"content":"<p>Phantom Taurus is a previously undocumented Chinese threat group. Explore how this group's distinctive toolset lead to uncovering their existence.</p>","contentLength":146,"flags":null,"enclosureUrl":"https://unit42.paloaltonetworks.com/wp-content/uploads/2025/09/09-6-Phantom-Taurus-1920x900-1.png","enclosureMime":"","commentsUrl":null}],"tags":["threatintel"]}