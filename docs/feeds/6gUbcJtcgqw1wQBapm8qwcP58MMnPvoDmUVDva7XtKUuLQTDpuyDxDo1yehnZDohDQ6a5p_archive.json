{"id":"6gUbcJtcgqw1wQBapm8qwcP58MMnPvoDmUVDva7XtKUuLQTDpuyDxDo1yehnZDohDQ6a5p","title":"Slashdot: Developers","displayTitle":"Dev - Slashdot - Dev","url":"http://rss.slashdot.org/Slashdot/slashdotDevelopers","feedLink":"https://developers.slashdot.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":15,"items":[{"title":"New Claude Model Runs 30-Hour Marathon To Create 11,000-Line Slack Clone","url":"https://developers.slashdot.org/story/25/09/29/1733238/new-claude-model-runs-30-hour-marathon-to-create-11000-line-slack-clone?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1759167180,"author":"msmash","guid":303,"unread":true,"content":"Anthropic's Claude Sonnet 4.5 ran autonomously for 30 hours to build a chat application similar to Slack or Teams, generating approximately 11,000 lines of code before stopping upon task completion. The model, announced today, marks a significant leap from the company's Opus 4 model, which ran for seven hours in May. \n\nClaude Sonnet 4.5 performs three times better at browser navigation and computer use than Anthropic's October technology. Beta-tester Canva deployed the model for complex engineering tasks in its codebase and product features. Anthropic paired the release with virtual machines, memory, context management, and multi-agent support tools, enabling developers to build their own AI agents using the same building blocks that power Claude Code.","contentLength":762,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Professor Warns CS Graduates are Struggling to Find Jobs","url":"https://developers.slashdot.org/story/25/09/29/029201/professor-warns-cs-graduates-are-struggling-to-find-jobs?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1759145640,"author":"EditorDavid","guid":302,"unread":true,"content":"\"Computer science went from a future-proof career to an industry in upheaval in a shockingly small amount of time,\" writes Business Insider, citing remarks from UC Berkeley professor Hany Farid said during a recent episode of Nova's \"Particles of Thought\" podcast. \n\"Our students typically had five internship offers throughout their first four years of college,\" Farid said. \"They would graduate with exceedingly high salaries, multiple offers. They had the run of the place. That is not happening today. They're happy to get one job offer....\"\n\nIt's too easy to just blame AI, though, Farid said. \"Something is happening in the industry,\" he said. \"I think it's a confluence of many things. I think AI is part of it. I think there's a thinning of the ranks that's happening, that's part of it, but something is brewing...\" \n\nFarid, one of the world's experts on deepfake videos, said he is often asked for advice. He said what he tells students has changed... \"Now, I think I'm telling people to be good at a lot of different things because we don't know what the future holds.\" \nLike many in the AI space, Farid said that those who use breakthrough technologies will outlast those who don't. \"I don't think AI is going to put lawyers out of business, but I think lawyers who use AI will put those who don't use AI out of business,\" he said. \"And I think you can say that about every profession.\"\n","contentLength":1399,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Will AI Mean Bring an End to Top Programming Language Rankings?","url":"https://developers.slashdot.org/story/25/09/28/1823244/will-ai-mean-bring-an-end-to-top-programming-language-rankings?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1759083960,"author":"EditorDavid","guid":301,"unread":true,"content":"IEEE Spectrum ranks the popularity of programming languages — but is there a problem? Programmers \"are turning away from many of these public expressions of interest. Rather than page through a book or search a website like Stack Exchange for answers to their questions, they'll chat with an LLM like Claude or ChatGPT in a private conversation.\"\n\nAnd with an AI assistant like Cursor helping to write code, the need to pose questions in the first place is significantly decreased. For example, across the total set of languages evaluated in the Top Programming Languages, the number of questions we saw posted per week on Stack Exchange in 2025 was just 22% of what it was in 2024... \n\nHowever, an even more fundamental problem is looming in the wings... In the same way most developers today don't pay much attention to the instruction sets and other hardware idiosyncrasies of the CPUs that their code runs on, which language a program is vibe coded in ultimately becomes a minor detail... [T]he popularity of different computer languages could become as obscure a topic as the relative popularity of railway track gauges... But if an AI is soothing our irritations with today's languages, will any new ones ever reach the kind of critical mass needed to make an impact? Will the popularity of today's languages remain frozen in time?\n \nThat's ultimately the larger question. \"how much abstraction and anti-foot-shooting structure will a sufficiently-advanced coding AI really need...?\"\n\n[C]ould we get our AIs to go straight from prompt to an intermediate language that could be fed into the interpreter or compiler of our choice? Do we need high-level languages at all in that future? True, this would turn programs into inscrutable black boxes, but they could still be divided into modular testable units for sanity and quality checks. And instead of trying to read or maintain source code, programmers would just tweak their prompts and generate software afresh. \n\nWhat's the role of the programmer in a future without source code? Architecture design and algorithm selection would remain vital skills... How should a piece of software be interfaced with a larger system? How should new hardware be exploited? In this scenario, computer science degrees, with their emphasis on fundamentals over the details of programming languages, rise in value over coding boot camps. \n\nWill there be a Top Programming Language in 2026? Right now, programming is going through the biggest transformation since compilers broke onto the scene in the early 1950s. Even if the predictions that much of AI is a bubble about to burst come true, the thing about tech bubbles is that there's always some residual technology that survives. It's likely that using LLMs to write and assist with code is something that's going to stick. So we're going to be spending the next 12 months figuring out what popularity means in this new age, and what metrics might be useful to measure. \nHaving said that, IEEE Spectrum still ranks programming language popularity three ways — based on use among working programmers, demand from employers, and \"trending\" in the zeitgeist — using seven different metrics. \n\nTheir results? Among programmers, \"we see that once again Python has the top spot, with the biggest change in the top five being JavaScript's drop from third place last year to sixth place this year. As JavaScript is often used to create web pages, and vibe coding is often used to create websites, this drop in the apparent popularity may be due to the effects of AI... In the 'Jobs' ranking, which looks exclusively at what skills employers are looking for, we see that Python has also taken 1st place, up from second place last year, though SQL expertise remains an incredibly valuable skill to have on your resume.\"","contentLength":3809,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Bundler's Lead Maintainer Asserts Trademark in Ongoing Struggle with Ruby Central","url":"https://developers.slashdot.org/story/25/09/27/1910211/bundlers-lead-maintainer-asserts-trademark-in-ongoing-struggle-with-ruby-central?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1759001640,"author":"EditorDavid","guid":300,"unread":true,"content":"After the nonprofit Ruby Central removed all RubyGems' maintainers from its GitHub repository, André Arko — who helped build Bundler — wrote a new blog post on Thursday \"detailing Bundler's relationship with Ruby Central,\" according to this update from The New Stack.\n\n\n\"In the last few weeks, Ruby Central has suddenly asserted that they alone own Bundler,\" he wrote. \"That simply isn't true. In order to defend the reputation of the team of maintainers who have given so much time and energy to the project, I have registered my existing trademark on the Bundler project.\" \n\nHe adds that trademarks do not affect copyright, which stays with the original contributors unchanged. \"Trademarks only impact one thing: Who is allowed say that what they make is named 'Bundler,'\" he wrote. \"Ruby Central is welcome to the code, just like everyone else. They are not welcome to the project name that the Bundler maintainers have painstakingly created over the last 15 years.\" \n\nHe is, however, not seeking the trademark for himself, noting that the \"idea of Bundler belongs to the Ruby community.\" \"Once there is a Ruby organization that is accountable to the maintainers, and accountable to the community, with openly and democratically elected board members, I commit to transfer my trademark to that organization,\" he said. \"I will not license the trademark, and will instead transfer ownership entirely. Bundler should belong to the community, and I want to make sure that is true for as long as Bundler exists.\"\n \n\nThe blog It's FOSS also has an update on Spinel, the new worker-owned collective founded by Arko, Samuel Giddins [who Giddins led RubyGems security efforts], and Kasper Timm Hansen (who served served on the Rails core team from 2016 to 2022 and was one of its top contributors):\n\nThese guys aren't newcomers but some of the architects behind Ruby's foundational infrastructure. Their flagship offering is rv [\"the Ruby swiss army knife\"], a tool that aims to replace the fragmented Ruby tooling ecosystem. It promises to [in the future] handle everything from rvm, rbenv, chruby, bundler, rubygems, and others — all at once while redefining how Ruby development tools should work... Spinel operates on retainer agreements with companies needing Ruby expertise instead of depending on sponsors who can withdraw support or demand control. This model maintains independence while ensuring sustainability for the maintainers. \n\nThe Register had reported Thursday:\n\n Spinel's 'rv' project aims to supplant elements of RubyGems and Bundler with a more modular, version-aware manager. Some in the Ruby community have already accused core Rails figures of positioning Spinel as a threat. For example, Rafael FranÃa of Shopify commented that admins of the new project should not be trusted to avoid \"sabotaging rubygems or bundler.\"\n","contentLength":2846,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Disastrous Oracle Implementation At Europe's Largest City Council.","url":"https://developers.slashdot.org/story/25/09/26/013211/disastrous-oracle-implementation-at-europes-largest-city-council?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758880800,"author":"BeauHD","guid":299,"unread":true,"content":"Longtime Slashdot reader whoever57 writes: Birmingham City Council, the largest such entity in Europe, has been declared effectively bankrupt. There are a couple of reasons for this, but one of them is a disastrous project to replace the city's income management system using Oracle. The cost of this has risen to $230 million, while the initial estimate was $24 million. There was a failed rollout of the new system earlier this year. \"Original plans for the replacement of SAP with Oracle Fusion set aside a 19.965 million-euro budget for three years implementation until the end of the 2021 financial year,\" reports The Register. \"Go-live date was later put back until April 2022 and the budget increased to 40 million euros. After the council realized it would need to reimplement all of Oracle, the budget for running the old system and introducing the new one increased to 131 million euros.\"\n \n\"In a hastily convened Audit Committee meeting this week, councilor heard how that date has now been put back until November, expressing their anger that the news hit the media before they were told.\" Testing failed with only a 73.3% pass rate and 10 severe deficits, \"below the acceptance criteria of a 95 percent pass rate and zero severe deficits.","contentLength":1251,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"OpenAI, Oracle, SoftBank Plan Five New AI Data Centers For $500 Billion Stargate Project","url":"https://developers.slashdot.org/story/25/09/24/0351254/openai-oracle-softbank-plan-five-new-ai-data-centers-for-500-billion-stargate-project?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758718800,"author":"BeauHD","guid":298,"unread":true,"content":"An anonymous reader quotes a report from Reuters: OpenAI, Oracle, and SoftBank on Tuesday announced plans for five new artificial intelligence data centers in the United States to build out their ambitious Stargate project. [...] ChatGPT-maker OpenAI said on Tuesday it will open three new sites with Oracle in Shackelford County, Texas, Dona Ana County, New Mexico and an undisclosed site in the Midwest. Two more data center sites will be built in Lordstown, Ohio and Milam County, Texas by OpenAI, Japan's SoftBank and a SoftBank affiliate.\n \nThe new sites, the Oracle-OpenAI site expansion in Abilene, Texas, and the ongoing projects with CoreWeave will bring Stargate's total data center capacity to nearly 7 gigawatts and more than $400 billion in investment over the next three years, OpenAI said. The $500 billion project was intended to generate 10 gigawatts in total data center capacity. \"AI can only fulfill its promise if we build the compute to power it,\" OpenAI CEO Sam Altman said in a statement. The Tuesday's announcement, expected to create 25,000 onsite jobs, follows Nvidia saying on Monday that it will invest up to $100 billion in OpenAI and supply data center chips. OpenAI and partners plan to use debt financing to lease chips for the Stargate project, people familiar with the matter said.","contentLength":1316,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dedicated Mobile Apps For Vibe Coding Have So Far Failed To Gain Traction","url":"https://developers.slashdot.org/story/25/09/23/2115212/dedicated-mobile-apps-for-vibe-coding-have-so-far-failed-to-gain-traction?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758662400,"author":"BeauHD","guid":297,"unread":true,"content":"An anonymous reader quotes a report from TechCrunch: While many vibe-coding startups have become unicorns, with valuations in the billions, one area where AI-assisted coding has not yet taken off is on mobile devices. Despite the numerous apps now available that offer vibe-coding tools on mobile platforms, none are gaining noticeable downloads, and few are generating any revenue at all. According to an analysis of global app store trends by the app intelligence provider Appfigures, only a small handful of mobile apps offering vibe-coding tools have seen any downloads, let alone generated revenue.\n \nThe largest of these is Instance: AI App Builder, which has seen only 16,000 downloads and $1,000 in consumer spending. The next largest app, Vibe Studio, has pulled in just 4,000 downloads but has made no money. This situation could still change, of course. The market is young, and vibe-coding apps continue to improve and work out the bugs. New apps in this space are arriving all the time, too. This year, a startup called Vibecode launched with $9.4 million in seed funding from Reddit co-founder Alexis Ohanian's Seven Seven Six. The company's service allows users to create mobile apps using AI within its own iOS app. Vibecode is so new, Appfigures doesn't yet have data on it. For now, most people who want to toy around with vibe-coding technology are doing so on the desktop.","contentLength":1392,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Why One Computer Science Professor is 'Feeling Cranky About AI' in Education","url":"https://news.slashdot.org/story/25/09/21/2331240/why-one-computer-science-professor-is-feeling-cranky-about-ai-in-education?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758498120,"author":"EditorDavid","guid":296,"unread":true,"content":"Long-time Slashdot reader theodp writes: Over at the Communications of the ACM, Bard College CS Prof Valerie Barr explains why she's Feeling Cranky About AI and CS Education. Having seen CS education go through a number of we-have-to-teach-this moments over the decades — introductory programming languages, the Web, Data Science, etc. — Barr turns her attention to the next hand-wringing \"what will we do\" CS education moment with AI. \"We're jumping through hoops without stopping first to question the run-away train,\" Barr writes...\n\n Barr calls for stepping back from \"the industry assertion that the ship has sailed, every student needs to use AI early and often, and there is no future application that isn't going to use AI in some way\" and instead thoughtfully \"articulate what sort of future problem solvers and software developers we want to graduate from our programs, and determine ways in which the incorporation of AI can help us get there.\"\n \n\nFrom the article:\n\nIn much discussion about CS education: \n\na.) There's little interest in interrogating the downsides of generative AI, such as the environmental impact, the data theft impact, the treatment and exploitation of data workers. \n\nb.) There's little interest in considering the extent to which, by incorporating generative AI into our teaching, we end up supporting a handful of companies that are burning billions in a vain attempt to each achieve performance that is a scintilla better than everyone else's. \n\nc.) There's little interest in thinking about what's going to happen when the LLM companies decide that they have plateaued, that there's no more money to burn/spend, and a bunch of them fold—but we've perturbed education to such an extent that our students can no longer function without their AI helpers.","contentLength":1796,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Secure Software Supply Chains, Urges Former Go Lead Russ Cox","url":"https://developers.slashdot.org/story/25/09/21/0650219/secure-software-supply-chains-urges-former-go-lead-russ-cox?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758468840,"author":"EditorDavid","guid":295,"unread":true,"content":"Writing in Communications of the ACM, former Go tech lead Russ Cox warns we need to keep improving defenses of software supply chains, highlighting \"promising approaches that should be more widely used\" and \"areas where more work is needed.\"\nThere are important steps we can take today, such as adopting software signatures in some form, making sure to scan for known vulnerabilities regularly, and being ready to update and redeploy software when critical new vulnerabilities are found. More development should be shifted to safer languages that make vulnerabilities and attacks less likely. We also need to find ways to fund open source development to make it less susceptible to takeover by the mere offer of free help. Relatively small investments in OpenSSL and XZ development could have prevented both the Heartbleed vulnerability and the XZ attack. \n\nSome highlights from the 5,000-word article:\n\n\n Make Builds Reproducible. \"The Reproducible Builds project aims to raise awareness of reproducible builds generally, as well as building tools to help progress toward complete reproducibility for all Linux software. The Go project recently arranged for Go itself to be completely reproducible given only the source code... A build for a given target produces the same distribution bits whether you build on Linux or Windows or Mac, whether the build host is X86 or ARM, and so on. Strong reproducibility makes it possible for others to easily verify that the binaries posted for download match the source code...\"\n Prevent Vulnerabilities. \"The most secure software dependencies are the ones not used in the first place: Every dependency adds risk... Another good way to prevent vulnerabilities is to use safer programming languages that remove error-prone language features or make them needed less often...\"\n Authenticate Software. (\"Cryptographic signatures make it impossible to nefariously alter code between signing and verifying. The only problem left is key distribution...\") \"The Go checksum database is a real-world example of this approach that protects millions of Go developers. The database holds the SHA256 checksum of every version of every public Go module...\"\n Fund Open Source. [Cox first cites the XKCD cartoon \"Dependencies,\" calling it \"a disturbingly accurate assessment of the situation...\"] \"The XZ attack is the clearest possible demonstration that the problem is not fixed. It was enabled as much by underfunding of open source as by any technical detail.\"\nThe article also emphasized the importance of finding and fixing vulnerabilities quickly, arguing that software attacks must be made more difficult and expensive. \n\"We use source code downloaded from strangers on the Internet in our most critical applications; almost no one is checking the code.... We all have more work to do.\"","contentLength":2819,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Self-Replicating Worm Affected Several Hundred NPM Packages, Including CrowdStrike's","url":"https://it.slashdot.org/story/25/09/20/0542237/self-replicating-worm-affected-several-hundred-npm-packages-including-crowdstrikes?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758389640,"author":"EditorDavid","guid":294,"unread":true,"content":"The Shai-Hulud malware campaign impacted hundreds of npm packages across multiple maintainers, reports Koi Security, including popular libraries like @ctrl/tinycolor and some packages maintained by CrowdStrike.\n\nMalicious versions embed a trojanized script (bundle.js) designed to steal developer credentials, exfiltrate secrets, and persist in repositories and endpoints through automated workflows. \nKoi Security created a table of packages identified as compromised, promising it's \"continuously updated\" (and showing the last compromise detected Tuesday). Nearly all of the compromised packages have a status of \"removed from NPM\".\n\nAttackers published malicious versions of @ctrl/tinycolor and other npm packages, injecting a large obfuscated script (bundle.js) that executes automatically during installation. This payload repackages and republishes maintainer projects, enabling the malware to spread laterally across related packages without direct developer involvement. As a result, the compromise quickly scaled beyond its initial entry point, impacting not only widely used open-source libraries but also CrowdStrike's npm packages. \nThe injected script performs credential harvesting and persistence operations. It runs TruffleHog to scan local filesystems and repositories for secrets, including npm tokens, GitHub credentials, and cloud access keys for AWS, GCP, and Azure. It also writes a hidden GitHub Actions workflow file (.github/workflows/shai-hulud-workflow.yml) that exfiltrates secrets during CI/CD runs, ensuring long-term access even after the initial infection. This dual focus on endpoint secret theft and backdoors makes Shai-Hulud one of the most dangerous campaigns ever compared to previous compromises. \n\"The malicious code also attempts to leak data on GitHub by making private repositories public,\" according to a Tuesday blog post from security systems provider Sysdig:\nThe Sysdig Threat Research Team (TRT) has been monitoring this worm's progress since its discovery. Due to quick response times, the number of new packages being compromised has slowed considerably. No new packages have been seen in several hours at the time... \n\nTheir blog post concludes \"Supply chain attacks are increasing in frequency. It is more important than ever to monitor third-party packages for malicious activity.\" \n\nSome context from Tom's Hardware:\n\nTo be clear: This campaign is distinct from the incident that we covered on Sept. 9, which saw multiple npm packages with billions of weekly downloads compromised in a bid to steal cryptocurrency. The ecosystem is the same — attackers have clearly realized the GitHub-owned npm package registry for the Node.js ecosystem is a valuable target — but whoever's behind the Shai-Hulud campaign is after more than just some Bitcoin.\n","contentLength":2804,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"C++ Committee Prioritizes 'Profiles' Over Rust-Style Safety Model Proposal","url":"https://developers.slashdot.org/story/25/09/20/0449252/c-committee-prioritizes-profiles-over-rust-style-safety-model-proposal?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758386040,"author":"EditorDavid","guid":293,"unread":true,"content":"Long-time Slashdot reader robinsrowe shared this report from the Register:\n\n\nThe C++ standards committee abandoned a detailed proposal to create a rigorously safe subset of the language, according to the proposal's co-author, despite continuing anxiety about memory safety. \"The Safety and Security working group voted to prioritize Profiles over Safe C++. Ask the Profiles people for an update. Safe C++ is not being continued,\" Sean Baxter, author of the cutting-edge Circle C++ compiler, commented in June this year. The topic came up as developers like Simone Bellavia noted the anniversary of the proposal and discovered a decision had been made on Safe C++. \n\nOne year ago, Baxter told The Reg that the project would enable C++ developers to get the memory safety of Rust, but without having to learn a new language. \"Safe C++ prevents users from writing unsound code,\" he said. \"This includes compile-time intelligence like borrow checking to prevent use-after-free bugs and initialization analysis for type safety.\" Safe C++ would enable incremental migration of code, since it only applies to code in the safe context. Existing unsafe code would run as before. \n\nEven the matter of whether the proposal has been abandoned is not clear-cut. Erich Keane, C++ committee member and co-chair of the C++ Evolution Working Group (EWG), said that Baxter's proposal \"got a vote of encouragement where roughly 1/2 (20/45) of the people encouraged Sean's paper, and 30/45 encouraged work on profiles (with 6 neutral)... Sean is completely welcome to continue the effort, and many in the committee would love to see him make further effort on standardizing it.\" \nIn response, Baxter said: \"The Rust safety model is unpopular with the committee. Further work on my end won't change that. Profiles won the argument.\" He added that the language evolution principles adopted by the EWG include the statement that \"we should avoid requiring a safe or pure function annotation that has the semantics that a safe or pure function can only call other safe or pure functions.\" This, he said, is an \"irreconcilable design disagreement....\"","contentLength":2126,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Microsoft Favors Anthropic Over OpenAI For Visual Studio Code","url":"https://developers.slashdot.org/story/25/09/17/1927233/microsoft-favors-anthropic-over-openai-for-visual-studio-code?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1758141600,"author":"BeauHD","guid":292,"unread":true,"content":"Microsoft is now prioritizing Anthropic's Claude 4 over OpenAI's GPT-5 in Visual Studio Code's auto model feature, signaling a quiet but clear shift in preference. The Verge reports: \"Based on internal benchmarks, Claude Sonnet 4 is our recommended model for GitHub Copilot,\" said Julia Liuson, head of Microsoft's developer division, in an internal email in June. While that guidance was issued ahead of the GPT-5 release, I understand Microsoft's model guidance hasn't changed.\n \nMicrosoft is also making \"significant investments\" in training its own AI models. \"We're also going to be making significant investments in our own cluster. So today, MAI-1-preview was only trained on 15,000 H100s, a tiny cluster in the grand scheme of things,\" said Microsoft AI chief Mustafa Suleyman, in an employee-only town hall last week.\n \nMicrosoft is also reportedly planning to use Anthropic's AI models for some features in its Microsoft 365 apps soon. The Information reports that the Microsoft 365 Copilot will be \"partly powered by Anthropic models,\" after Microsoft found that some of these models outperformed OpenAI in Excel and PowerPoint.","contentLength":1139,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Vibe Coding Has Turned Senior Devs Into 'AI Babysitters'","url":"https://developers.slashdot.org/story/25/09/15/2056250/vibe-coding-has-turned-senior-devs-into-ai-babysitters?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1757978400,"author":"BeauHD","guid":291,"unread":true,"content":"An anonymous reader quotes a report from TechCrunch: Carla Rover once spent 30 minutes sobbing after having to restart a project she vibe coded. Rover has been in the industry for 15 years, mainly working as a web developer. She's now building a startup, alongside her son, that creates custom machine learning models for marketplaces. She called vibe coding a beautiful, endless cocktail napkin on which one can perpetually sketch ideas. But dealing with AI-generated code that one hopes to use in production can be \"worse than babysitting,\" she said, as these AI models can mess up work in ways that are hard to predict.\n \nShe had turned to AI coding in a need for speed with her startup, as is the promise of AI tools. \"Because I needed to be quick and impressive, I took a shortcut and did not scan those files after the automated review,\" she said. \"When I did do it manually, I found so much wrong. When I used a third-party tool, I found more. And I learned my lesson.\" She and her son wound up restarting their whole project -- hence the tears. \"I handed it off like the copilot was an employee,\" she said. \"It isn't.\"\n \nRover is like many experienced programmers turning to AI for coding help. But such programmers are also finding themselves acting like AI babysitters -- rewriting and fact-checking the code the AI spits out. A recent report by content delivery platform company Fastly found that at least 95% of the nearly 800 developers it surveyed said they spend extra time fixing AI-generated code, with the load of such verification falling most heavily on the shoulders of senior developers. These experienced coders have discovered issues with AI-generated code ranging from hallucinating package names to deleting important information and security risks. Left unchecked, AI code can leave a product far more buggy than what humans would produce.\n \nWorking with AI-generated code has become such a problem that it's given rise to a new corporate coding job known as \"vibe code cleanup specialist.\" TechCrunch spoke to experienced coders about their time using AI-generated code about what they see as the future of vibe coding. Thoughts varied, but one thing remained certain: The technology still has a long way to go. \"Using a coding co-pilot is kind of like giving a coffee pot to a smart six-year-old and saying, 'Please take this into the dining room and pour coffee for the family,'\" Rover said. Can they do it? Possibly. Could they fail? Definitely. And most likely, if they do fail, they aren't going to tell you. \"It doesn't make the kid less clever,\" she continued. \"It just means you can't delegate [a task] like that completely.\" Further reading: The Software Engineers Paid To Fix Vibe Coded Messes","contentLength":2731,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Is Perl the World's 10th Most Popular Programming Language?","url":"https://developers.slashdot.org/story/25/09/14/0134239/is-perl-the-worlds-10th-most-popular-programming-language?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1757820840,"author":"EditorDavid","guid":290,"unread":true,"content":"TIOBE attempts to calculate programming language popularity using the number of skilled engineers, courses, and third-party vendors. \nAnd the eight most popular languages in September's rankings haven't changed since last month:\n\n 1. Python\n2. C++\n3. C \n4. Java\n5. C#\n6. JavaScript\n7. Visual Basic\n8. Go \n\n\n\nBut by TIOBE's ranking, Perl is still the #10 most-popular programming in September (dropping from #9 in August). \"One year ago Perl was at position 27 and now it suddenly pops up at position 10 again,\" marvels TIOBE CEO Paul Jansen.\nThe technical reason why Perl is rated this high is because of its huge number of books on Amazon. It has 4 times more books listed than for instance PHP, or 7 times more books than Rust. The underlying \"real\" reason for Perl's increase of popularity is unknown to me. The only possibility I can think of is that Perl 5 is now gradually considered to become the real Perl... Perl 6/Raku is at position 129 of the TIOBE index, thus playing no role at all in the programming world. Perl 5 on the other hand is releasing more often recently, thus gaining attention. \nAn article at the i-Programmer blog thinks Perl's resurgence could be from its text processing capabilities:\n\nEven in this era of AI, everything is still governed by text formats; text is still the King. XML, JSON calling APIs, YAML, Markdown, Log files..That means that there's still need to process it, transform it, clean it, extract from it. Perl with its first-class-citizen regular expressions, the wealth of text manipulation libraries up on CPAN and its full Unicode support of all the latest standards, was and is still the best. Simply there's no other that can match Perl's text processing capabilities. \nThey also cite Perl's backing by the open source community, and its \"getting a 'proper' OOP model in the last couple of years... People just don't know what Perl is capable of and instead prefer to be victims of FOMO ephemeral trends, chasing behind the new and shiny.\" \n\nPerl creator Larry Wall answered questions from Slashdot's readers in 2016. So I'd be curious from Slashdot's readers about Perl today. (Share your experiences in the comments if you're still using Perl -- or Raku...) \n\nPerl's drop to #9 means Delphi/Object Pascal rises up one rank, growing from 1.82% in August to 2.26% in September to claim September's #9 spot. \"At number 11 and 1.86%, SQL is quite close to entering the top 10 again,\" notes TechRepublic. (SQL fell to #12 in June, which the site speculated was due to \"the increased use of NoSQL databases for AI applications.\") \nBut TechRepublic adds that the #1 most popular programming language (according to TIOBE) is still Python:\n\nPerl sits at 2.03% in TIOBE's proprietary ranking system in September, up from 0.64% in January. Last year, Perl held the 27th position... Python's unstoppable rise dipped slightly from 26.14% in August to 25.98% in September. Python is still well ahead of every other language on the index.","contentLength":2977,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"The Software Engineers Paid To Fix Vibe Coded Messes","url":"https://developers.slashdot.org/story/25/09/13/054206/the-software-engineers-paid-to-fix-vibe-coded-messes?utm_source=rss1.0mainlinkanon&utm_medium=feed","date":1757781240,"author":"EditorDavid","guid":289,"unread":true,"content":"\"Freelance developers and entire companies are making a business out of fixing shoddy vibe coded software,\" writes 404 Media, interviewing one of the \"dozens of people on Fiverr... now offering services specifically catering to people with shoddy vibe coded projects.\" \n\nHamid Siddiqi, who offers to \"review, fix your vibe code\" on Fiverr, told the 404 Media that \"Currently, I work with around 15-20 clients regularly, with additional one-off projects throughout the year. (\"Siddiqi said common issues he fixes in vibe coded projects include inconsistent UI/UX design in AI-generated frontends, poorly optimized code that impacts performance, misaligned branding elements, and features that function but feel clunky or unintuitive,\" as well as work o color schemes, animations, and layouts.) \n\nAnd others coders are also pursuing the \"vibe coded mess\" market:\nSwatantra Sohni, who started VibeCodeFixers.com, a site for people with vibe coded projects who need help from experienced developers to fix or finish their projects, says that almost 300 experienced developers have posted their profiles to the site. He said so far VibeCodeFixers.com has only connected between 30-40 vibe code projects with fixers, but that he hasn't done anything to promote the service and at the moment is focused on adding as many software developers to the platform as possible... \n\n\"Most of these vibe coders, either they are product managers or they are sales guys, or they are small business owners, and they think that they can build something,\" Sohni told me. \"So for them it's more for prototyping...\" Another big issue Sohni identified is \"credit burn,\" meaning the money vibe coders waste on AI usage fees in the final 10-20 percent stage of developing the app, when adding new features breaks existing features. \nSohni told me he thinks vibe coding is not going anywhere, but neither are human developers. \"I feel like the role [of human developers] would be slightly limited, but we will still need humans to keep this AI on the leash,\" he said. \n\nThe article also notes that established software development companies like Ulam Labs, now say \"we clean up after vibe coding. Literally.\" \n\"Built something fast? Now it's time to make it solid,\" Ulam Labs pitches on its site,\" suggesting that for their potential customers \"the tech debt is holding you back: no tests, shaky architecture, CI/CD is a dream, and every change feels like defusing a bomb. That's where we come in.\"","contentLength":2470,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","slashdot"]}