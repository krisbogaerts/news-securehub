{"id":"3Jheb3FyCEtx7o61cc6N6","title":"Reddit - NetSec","displayTitle":"Reddit - NetSec","url":"","feedLink":"","isQuery":true,"isEmpty":false,"isHidden":false,"itemCount":10,"items":[{"title":"CVE-2025-59489: Arbitrary Code Execution in Unity Runtime","url":"https://flatt.tech/research/posts/arbitrary-code-execution-in-unity-runtime/","date":1759467980,"author":"/u/toyojuni","guid":121,"unread":true,"content":"<h5>\n      Posted on \n  \n    October 3, 2025\n  \n\n\n      \n        &nbsp;•&nbsp;\n      \n      \n      6&nbsp;minutes\n      &nbsp;•\n      \n      1067&nbsp;words\n      \n    </h5><p>Hello, I’m <a href=\"https://ryotak.net\" target=\"_blank\" rel=\"noopener\">RyotaK</a>\n (<a href=\"https://twitter.com/ryotkak\" target=\"_blank\" rel=\"noopener\">@ryotkak</a>\n), a security engineer at GMO Flatt Security Inc.</p><p>In May 2025, I participated in the <a href=\"https://www.youtube.com/watch?v=jiLeF0zO8Mg\" target=\"_blank\" rel=\"noopener\">Meta Bug Bounty Researcher Conference 2025.</a>\n\nDuring this event, I discovered a vulnerability (CVE-2025-59489) in the Unity Runtime that affects games and applications built on Unity 2017.1 and later.</p><p>In this article, I will explain the technical aspects of this vulnerability and its impact.</p><p>This vulnerability was disclosed to Unity following responsible disclosure practices.\nUnity has since released patches for Unity 2019.1 and later, as well as a Unity Binary Patch tool to address the issue, and I strongly encourage developers to download the updated versions of Unity, recompile affected games or applications, and republish as soon as possible.</p><p>We appreciate Unity’s commitment to addressing this issue promptly and their ongoing efforts to enhance the security of their platform.\nSecurity vulnerabilities are an inherent challenge in software development, and by working together as a community, we can continue to make software systems safer for everyone.</p><p>A vulnerability was identified in the Unity Runtime’s intent handling process for Unity games and applications.\nThis vulnerability allows malicious intents to control command line arguments passed to Unity applications, enabling attackers to load arbitrary shared libraries ( files) and execute malicious code, depending on the platform.</p><p>In its default configuration, this vulnerability allowed malicious applications installed on the same device to hijack permissions granted to Unity applications.\nIn specific cases, the vulnerability could be exploited remotely to execute arbitrary code, although I didn’t investigate third-party Unity applications to find an app with the functionality required to enable this exploit.</p><p>Unity has addressed this issue and has updated all affected Unity versions starting with 2019.1. Developers are strongly encouraged to <a href=\"https://unity.com/releases/editor/archive\" target=\"_blank\" rel=\"noopener\">download them,</a>\n recompile their games and applications, and republish to ensure their projects remain secure.</p><p>Unity is a popular game engine used to develop games and applications for various platforms, including Android.</p><p>According to Unity’s website, 70% of top mobile games are built with Unity. This includes popular games like Among Us and Pokémon GO, along with many other applications that use Unity for development.</p><p> During the analysis, I used Android 16.0 on the Android Emulator of Android Studio. The behavior and impact of this vulnerability may differ on older Android versions.</p><p>To support debugging Unity applications on Android devices, Unity automatically adds a handler for the intent containing the  extra to the UnityPlayerActivity. This activity serves as the default entry point for applications and is exported to other applications.</p><div><pre tabindex=\"0\"><code data-lang=\"shell\"></code></pre></div><p>As documented above, the  extra is parsed as command line arguments for Unity.</p><p>While Android’s permission model manages feature access by granting permissions to applications, it does not restrict which intents can be sent to an application.\nThis means any application can send the  extra to a Unity application, allowing attackers to control the command line arguments passed to that application.</p><p>After loading the Unity Runtime binary into Ghidra, I discovered the following command line argument:</p><div><pre tabindex=\"0\"><code data-lang=\"c\"></code></pre></div><p>The value of this command line argument is later passed to , causing the path specified in  to be loaded as a native library.</p><div><pre tabindex=\"0\"><code data-lang=\"c\"></code></pre></div><p>This behavior allows attackers to execute arbitrary code within the context of the Unity application, leveraging its permissions by launching them with the -xrsdk-pre-init-library argument.</p><p>Any malicious application installed on the same device can exploit this vulnerability by:</p><ol><li>Extracting the native library with the <code>android:extractNativeLibs</code> attribute set to  in the AndroidManifest.xml</li><li>Launching the Unity application with the  argument pointing to the malicious library</li><li>The Unity application would then load and execute the malicious code with its own permissions</li></ol><h3>Remote Exploitation via Browser</h3><p>In specific cases, this vulnerability could potentially be exploited remotely although the condition .\nFor example, if an application exports  or  with the <code>android.intent.category.BROWSABLE</code> category (allowing browser launches), websites can specify extras passed to the activity using intent URLs:</p><pre tabindex=\"0\"><code>intent:#Intent;package=com.example.unitygame;scheme=custom-scheme;S.unity=-xrsdk-pre-init-library%20/data/local/tmp/malicious.so;end;\n</code></pre><p>At first glance, it might appear that malicious websites could exploit this vulnerability by forcing browsers to download  files and load them via the  argument.</p><p>However, Android’s strict SELinux policy prevents  from opening files in the downloads directory, which mitigates almost all remote exploitation scenarios.</p><pre tabindex=\"0\"><code>library \"/sdcard/Download/libtest.so\" (\"/storage/emulated/0/Download/libtest.so\") needed \nor dlopened by \"/data/app/~~24UwD8jnw7asNjRwx1MOBg==/com.DefaultCompany.com.unity.template. \nmobile2D-E043IptGJDwcTqq56BocIA==/lib/arm64/libunity.so\" is not accessible for the \nnamespace: [name=\"clns-9\", ld_library_paths=\"\",default_library_paths=\"/data/app/~~24UwD8jnw7asNjRwx1MOBg==/com.DefaultCompany.com.unity.template. \nmobile2D-E043IptGJDwcTqq56BocIA==/lib/arm64:/data/app/~~24UwD8jnw7asNjRwx1MOBg==/com.DefaultCompany.com.unity.template.mobile2D-E043IptGJDwcTqq56BocIA==/base.apk!/lib/arm64-v8a\", permitted_paths=\"/data:/mnt/expand:/data/data/com.DefaultCompany.com.unity.template.mobile2D\"]\n</code></pre><p>That being said, since the  directory is included in , if the target application writes files to its private storage, it can be used to bypass this restriction.</p><p>Furthermore,  doesn’t require the  file extension. If attackers can control the content of a file in an application’s private storage, they can exploit this vulnerability by creating a file containing malicious native library binary. This is actually a common pattern when applications cache data.</p><h3>Requirements for Remote Exploitation</h3><p>To exploit this vulnerability remotely, the following conditions must be met:</p><ul><li>The application exports  or  with the <code>android.intent.category.BROWSABLE</code> category</li><li>The application writes files with attacker-controlled content to its private storage (e.g., through caching)</li></ul><p>Even without these conditions, local exploitation remains possible for any Unity application.</p><p>In this article, I explained a vulnerability in Unity Runtime that allows arbitrary code execution in almost all Unity applications on Android.</p><p>I hope this article helps you understand that vulnerabilities can exist in the frameworks and libraries you depend on, and you should always be mindful of the security implications of the features you use.</p><p>At GMO Flatt Security, we provide top-notch penetration testing for a wide range of targets, from Web apps to IoT devices.</p><p>We also developed Takumi, our AI security engineer. It’s an autonomous agent that finds vulnerabilities in source code and has already discovered CVEs in major libraries like Vim and Next.js.\n<a href=\"https://flatt.tech/en/takumi\" target=\"_blank\" rel=\"noopener\">https://flatt.tech/en/takumi</a></p><p>Recently, we’ve expanded Takumi’s capabilities. It’s no longer just a SAST (white-box testing) tool; we’ve added DAST (black-box testing) to enable high-fidelity gray-box scanning for more accurate results.</p><p>Based in Japan, we work with clients globally, including industry leaders like Canonical Ltd.</p>","contentLength":7453,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nwq9wj/cve202559489_arbitrary_code_execution_in_unity/"},{"title":"Nuclei Templates for Detecting AMI MegaRAC BMC Vulnerabilities","url":"https://eclypsium.com/blog/eclypsium-releases-tools-for-detecting-ami-megarac-bmc-vulnerabilities/","date":1759355254,"author":"/u/TechDeepDive","guid":126,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nvllz0/nuclei_templates_for_detecting_ami_megarac_bmc/"},{"title":"r/netsec monthly discussion & tool thread","url":"https://www.reddit.com/r/netsec/comments/1nv88jp/rnetsec_monthly_discussion_tool_thread/","date":1759325370,"author":"/u/albinowax","guid":128,"unread":true,"content":"<p>Questions regarding netsec and discussion related directly to netsec are welcome here, as is sharing tool links.</p><ul><li>Always maintain civil discourse. Be awesome to one another - moderator intervention will occur if necessary.</li><li>Avoid NSFW content unless absolutely necessary. If used, mark it as being NSFW. If left unmarked, the comment will be removed entirely.</li><li>If linking to classified content, mark it as such. If left unmarked, the comment will be removed entirely.</li><li>Avoid use of memes. If you have something to say, say it with real words.</li><li>All discussions and questions should directly relate to netsec.</li><li>No tech support is to be requested or provided on <a href=\"https://www.reddit.com/r/netsec\">r/netsec</a>.</li></ul><p>As always, the content &amp; discussion guidelines should also be observed on <a href=\"https://www.reddit.com/r/netsec\">r/netsec</a>.</p><p>Feedback and suggestions are welcome, but don't post it here. Please send it to the moderator inbox.</p>","contentLength":839,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"IPv4/IPv6 Packet Fragmentation: Implementation Details - PacketSmith","url":"https://packetsmith.ca/ipv4-ipv6-packet-fragmentation/","date":1759324817,"author":"/u/MFMokbel","guid":120,"unread":true,"content":"<p>In release v2.0, we’ve shipped PacketSmith with support for IPv4/IPv6 fragmentation detection and reassembly. Additionally, we’ve detailed some of the implementation details in the public article ““. In version 3.0, we’ve shipped a full IPv4 and IPv6 packet fragmenter that can be invoked via the option </p><p>IPv4 fragmentation logic is simpler to implement than IPv6’s. This is because IPv6 fragmentation requires careful handling of IPsec extensions and strict attention to the placement (or injection order) of the fragmentation header relative to other potential packet extensions.</p><p>You can  a packet capture’s packets at the IP level using a specific MTU (Maximum Transmission Unit) value. For IPv4 and IPv6, fragmentation is based on the header’s total length, such that if it exceeds the MTU, the  packet is fragmented (split into multiple IPv4/IPv6 packets) and replaced with the .</p><p>: The checksum for each IP fragment can only be computed if the IP reassembly function is disabled. The default network behaviour is to reassemble fragments, so you must explicitly disable this using the  flag.</p><p>: The following definitions are used throughout the article:</p><ul><li>The  is the packet to be fragmented.</li><li> are the fragmented packets of the .</li></ul><p>: To prevent console clutter from potentially hundreds of messages, error reporting for packet fragmentation failures is kept minimal. This applies whether the packet didn’t meet the fragmentation criteria or failed for another reason.</p><p>For IPv4, the MTU is defined as the maximum size of a packet, including the IP header and the payload; fragmentation can occur at either the host or the router.</p><p>When fragmenting an IPv4 packet that meets the MTU threshold, none of the layers before the IP layer is “considered”. &nbsp;</p><p>The maximum fragment payload is derived as follows:</p><p><strong> = floor( (mtu – ip_header_len) / 8 ) * 8</strong></p><ul><li>The  is the IPv4 header length, including any options.</li><li>The  is the IPv4 header length plus the IPv4 payload size.</li></ul><p>The number of fragments is determined with the following equation:</p><p><strong> = ceil(total_ip_payload_len / max_frag_payload_size)</strong></p><ul><li>The  is the IPv4  field, which holds the length of the IPv4 header (including options) and the IPv4 payload size.</li></ul><p>For calculating the last fragment payload length, the following equation is applied:</p><p><strong> = total_ip_payload_len – (num_of_frags – 1) * max_frag_payload_size</strong></p><p>Some of the conditions applied when processing a packet for fragmentation include:</p><ul><li>If the IPv4  flag is set, then the packet is skipped</li><li>If the IPv4 header is a 4-in-6 encapsulated header, then the packet is skipped</li><li>IPv4 header length cannot be greater than the provided MTU value</li><li>IPv4 header:  and  flags are set appropriately for each of the fragment packets</li><li>The IPv4 identification value for all fragment packets is inherited from the original packet</li><li>Payload size must be a multiple of 8 except for the last fragment packet</li><li>The packet’s original and captured length are updated accordingly to reflect the actual size of the packet</li><li>All the fragment packets inherit the same layers up to the IPv4 network layer of the original packet</li><li>When an IP packet is protected by IPsec, using Authentication Header (AH) and/or Encapsulation Security Payload (ESP), the AH and ESP headers are treated as part of the upper-layer payload. Therefore, fragmentation is performed on the entire IPsec-protected packet.</li></ul><p>Once a packet is fragmented successfully, the original packet is replaced with the fragment packets. Internally, PacketSmith fragments all packets by storing their respective fragment frames in a separate buffer using a std::map data structure, with the key being the original packet frame number/id. Once fragmentation is complete, we derive the relative index to the original packet with respect to the number of fragment packets replacing it, inject the fragments, and then delete the original packet. No temporary pcap is created. This all happens in-memory and in-place.</p><h6>IPv4 Fragmentation Example</h6><p>Consider the following PCAP example : It contains one packet with an IPv4 header that includes the following information:</p><pre>Internet Protocol Version 4, Src: 192.168.2.14, Dst: 66.235.200.1470100 .... = Version: 4 (5)Differentiated Services Field: 0x00 (DSCP: CS0, ECN: Not-ECT)<p>0000 00.. = Differentiated Services Codepoint: Default (0)</p>.... ..00 = Explicit Congestion Notification: Not ECN-Capable Transport (0): Identification: 0xff29 (65321)0... .... = Reserved bit: Not set..0. .... = More fragments: Not set<p>...0 0000 0000 0000 = Fragment Offset: 0</p>Time to Live: 128Header Checksum: 0x67c5 [correct]<p>Source Address: 192.168.2.14</p>Destination Address: 66.235.200.147</pre><p>Let’s fragment this packet with an MTU of 512, using the following PacketSmith option:</p><p>The expectation from executing the above command with respect to the equations defined earlier is as follows:</p><ul><li> = floor( (512 – 20) / 8) * 8 = 488</li><li> = ceil(1492 / 488) = 4</li><li> = 1492 – (4 – 1) * 488 = 1492 – 1464 = 28</li></ul><p>The resulting PCAP has been attached as . All of the fragment packets got incorrect checksums; to fix them, we execute the following command, with the  flag as mentioned in the introduction in Note-1.</p><p>The IPv4 fields in Figure 1 match the equations’ numbers. Note that for the Fragment Offset (FO), you need to multiply it by 8.</p><p>Fragmenting an IPv6 packet is more subtle and requires careful consideration of various rules and conditions for a successful operation, since this entails the injection of a fragment extension in a specific order. The minimum MTU value for IPv6 fragmentation is 1280 bytes; however, PacketSmith doesn’t enforce this limit, instead setting the minimum&nbsp;to 48 (IPv6 header length/40 + fragment extension length/8). You should avoid setting this value too low. If the setting doesn’t satisfy the upper-layer protocol’s minimum length condition, the protocol dissector will encounter errors during parsing.</p><p>Some of the conditions applied when processing a packet for fragmentation include:</p><ul><li>If the IPv6  already exists, then the packet is skipped&nbsp;</li></ul><blockquote><p>Each extension header should occur at most once, except for the Destination Options header, which should occur at most twice (once before a Routing header and once before the upper-layer header).</p></blockquote><ul><li>If the IPv6 header is a 6-in-4 encapsulated header, then the packet is skipped</li><li>(IPv6 payload length + header length) cannot be greater than the provided MTU value</li><li>The IPv6 fragment extension is constructed in-place and inserted into every fragment packet&nbsp;</li></ul><ul><li><ul><li>The identification field is pseudo-randomly generated for all fragment packets of the original packet</li><li> and  flags are set appropriately for each of the fragment packets</li></ul></li></ul><ul><li>Payload size must be a multiple of 8 except for the last fragment packet</li><li>The packet’s original and captured length are updated accordingly to reflect the actual size of the packet</li><li>All the fragment packets inherit the same layers up to the IPv6 network layer of the original packet</li><li>When an IP packet is protected by IPsec, using Authentication Header (AH) and/or Encapsulation Security Payload (ESP), the ESP header is treated as part of the upper-layer payload. All other extension headers are carried over with every fragment packet.</li></ul><blockquote><div>“When more than one extension header is used in the same packet, it is recommended that those headers appear in the following order:</div><div>Hop-by-Hop Options header</div><div>Destination Options header (note 1)</div><div>Authentication header (note 2)</div><div>Encapsulating Security Payload header (note 2)</div><div>Destination Options header (note 3)</div></blockquote><p>The ESP header isn’t a standard IPv6 extension; it’s an upper-layer protocol. PacketSmith is designed to parse IPv6 packets with these headers correctly.</p><p>Once a packet is fragmented successfully, the original packet is replaced with the fragment packets; the same process as with IPv4 fragmentation.</p><p>The same equations listed above apply here with the IPv6 version.&nbsp;</p><h6>IPv6 Fragmentation Example</h6><pre>Internet Protocol Version 6, Src: fe80::222:22ff:fe22:2222, Dst: ff02::50110 .... = Version: 6<p>.... 1110 0000 .... .... .... .... .... = Traffic Class: 0xe0 (DSCP: CS7, ECN: Not-ECT)</p>.... 1110 00.. .... .... .... .... .... = Differentiated Services Codepoint: Class Selector 7 (56)<p>.... .... ..00 .... .... .... .... .... = Explicit Congestion Notification: Not ECN-Capable Transport (0)</p>.... 0000 0000 0000 0000 0000 = Flow Label: 0x00000<strong>Next Header: </strong>Hop Limit: 1<p>Source Address: fe80::222:22ff:fe22:2222</p>Destination Address: ff02::5<p>[Source SLAAC MAC: Schaffne_22:22:22 (00:22:22:22:22:22)]</p>[Stream index: 0]</pre><p>As shown above, the  is set to 68, which is the length of the ESP upper-layer protocol “extension”. The IPv6 header is a fixed 40 bytes with no extensions. The Next Header field points to the upper-layer protocol “extension”, that’s ESP (50).</p><p>Let’s fragment this packet with an MTU of 64, using the following PacketSmith option:</p><p>The expectation from executing the above command with respect to the equations defined earlier is as follows:</p><ul><li> = floor( (64 – 40) / 8) * 8 = 24\n<ul><li>Actually, the effective fragment payload size is 16 bytes and not 24, since for every fragment packet, an 8-byte fragment extension is added. We’re subtracting the fragment size from the max_frag_payload_size.</li></ul></li><li> = ceil(108/ 24) = 5\n<ul><li>The  in the IPv6 header represents the header length, plus the length of any extensions that might exist, and the length of the IPv6 payload. In this case, it is: (40 + 0 + 68) = 108 bytes.</li></ul></li><li> = 108 – (5 – 1) * 24 = 12</li></ul><p>The resulting PCAP has been attached as <a href=\"https://packetsmith.ca/wp-content/uploads/2025/09/ipv6_frag.zip\"></a>, with the following screenshot:</p><p>The fragment extension has been added to every fragment packet, as shown in Figure 2, under the column “Fragment Header for IPv6”. The offsets in the IPv6 fragment extension in Figure 2 match the equations’ numbers. The original packet doesn’t carry any extension other than the ESP upper-layer protocol; therefore, the fragment extension is the only extension that exists in the fragment packets.</p><p>The following is a gallery of details of all 5 IPv6 fragment packets shown in Figure 2:</p>","contentLength":9941,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nv80ja/ipv4ipv6_packet_fragmentation_implementation/"},{"title":"Software Secured | Hacking Furbo 2: Mobile App and P2P Exploits | USA","url":"https://www.softwaresecured.com/post/hacking-furbo-a-hardware-research-project-part-2-mobile-and-p2p-exploits","date":1759283033,"author":"/u/duduywn","guid":119,"unread":true,"content":"<p>In the second part of our Hacking Furbo blog series we will focus on the mobile application and P2P communications from it. We will detail our process of identifying the mobile-side of the P2P communications and hooking them with Frida for a deeper understanding of how they work.</p><h3>Mobile Application Overview</h3><p>The Furbo mobile application is where all of the magic happens for a device owner. From here you can configure your device, surveil your pet, and toss treats (on the Furbo 360). They have also added, as many companies unfortunately do these days, an AI chat feature which allows you to get advice about your pet and query data.</p><p>Pulling the app down with adb, we gave it a quick run through MobSF to pick up any low hanging fruit and found that there was surprisingly little to report on from that review.</p><p>We also performed some mobile-specific tests, looking at things like exported services, service providers, activities and the like, without much success. We were able to get one finding from this however: insecure storage of sensitive information in the device's memory.</p><p>When you are assessing a mobile application and its handling of sensitive information in memory you must first identify several things you'd like to hunt for. As we would learn in the subsequent sections of this article, the Furbo device and mobile app perform some authentication to each other. We could see some of the API requests to the Furbo servers which initiated this authentication flow in the proxy history. These would be a valuable target.</p><p>Additionally, there were the CognitoTokens which were used to authenticate each request which we could hunt for. Any of these being found in memory could mean that an attacker could retrieve it and re-use it to take over the victim's account or Furbo device.</p><p>So, to test this we would have to do the following on a jail broken Android device with Frida installed:</p><ol role=\"list\"><li>While running a web proxy to capture the values in the API calls, open the mobile application and authenticate.</li><li>Navigate around the app, connecting to the device, making changes, etc.</li><li>Copy the values of any sensitive parameters such as the P2P or Cognito authentication tokens.</li><li>Close the application by swiping up to terminate it.</li><li>On our host machine, while connected with adb run: fridump3 -v -u -s Furbo</li></ol><p>This creates a dump of the device's memory in its current state. In a perfectly configured app, no sensitive information should reside in memory after the application has been terminated. Once the dump is completed we navigate into the output directory and grep for some of those previously identified sensitive details from the web proxy history.</p><p>Grepping through the Fridump output directory, we found that each of these aforementioned values have been stored in memory, after the application has been logged out from and terminated.</p><p>Next, we focused our attention on identifying how the device and the mobile application communicated with each other. We knew a few things, the device was communicating outbound over UDP port 10001, we found several Shared Object Libraries referencing TUTK, and we had seen some references to TUTK in the UART logs. All of this helped us determine that the P2P communication protocol in use was ThroughTek's<a href=\"https://www.throughtek.com/overview/\" target=\"_blank\"> Kalay Platform</a>, from here on out we'll simply refer to it as TUTK P2P since that is how it was referenced in the code for the Furbo device and mobile application. &nbsp;</p><p>This was a drastic change in direction from the previous research we had seen. For those unfamiliar with the work of SomersetRecon, they had done a review in 2021 of the Furbo 2.5 and first edition of the Furbo Mini in a three part blog series, the first part can be found<a href=\"https://www.somersetrecon.com/blog/2021/hacking-the-furbo-part-1\" target=\"_blank\"> here</a>. These devices were relying upon a RTSP stream to allow owners to view their cameras. Unfortunately for us the TUTK P2P protocol is much more secure and has far less public documentation available.</p><p>We spent quite a number of hours looking for public documentation on the protocol and came up with little. What we did find was that a researcher who goes by Kroo had released a<a href=\"https://github.com/kroo/wyzecam\" target=\"_blank\"> Python library</a> which could be used to communicate with Wyzecam devices, which also use TUTK P2P. This wouldn't exactly work for us—the level of effort to get it ported to Furbo wasn't reasonable for our research. We also came across some great research done by Mandiant into the protocol itself in 2021 which resulted in some huge headlines. Mandiant's paper which details this research, \"Mandiant Discloses Critical Vulnerability Affecting Millions of IoT Devices\" can be found<a href=\"https://cloud.google.com/blog/topics/threat-intelligence/mandiant-discloses-critical-vulnerability-affecting-iot-devices\" target=\"_blank\"> here</a>. We attempted to reach out to the authors of this report in the hopes that they may be able to shed some additional light on their exploits but to no avail.</p><p>In spite of this, we were able to glean a lot of information as the research was very detailed and gave us a far better understanding about how these communications worked. Seen below is an illustration, taken from their research paper, of how devices, mobile apps, and the Kalay network communicate with each other.</p><p>Based on this, we decided (after spending quite a bit of time trying to set up our own Python implementation) to forego the hard path and stick to something a bit easier instead: hooking the communications from the mobile application with Frida which could allow us to monitor and tamper with the traffic.</p><h3>Reversing the P2P Communications</h3><p>As we now knew the protocol in use, we decided to try to find the files which handled the P2P communications from the decompiled application. This would allow us to understand the command structure, the expected inputs, and to see if there were any hidden features, all of which would help us once we hooked the functions.</p><p>We found that the TUTK files resided under ./sources/com/tutk/, fairly straight forward and easy to guess.</p><p>Then, grepping for some of the various names we saw in the UART logs we found that the P2P command handling is implemented in the files which reside in: /sources/com/tomofun/furbo/device/p2p/cmd</p><p>After having reviewed each of these, our best guess was that the FurboP2pCmdImplTutkV3.java was what we would need to hook. This was because within this file we found the names of each P2P command as well as their definitions which explained what was expected for input. </p><p>Seen below is one of the commands which we will return to later. </p><p>With all of this information in tow, we used ChatGPT to generate a couple of Frida scripts with each having varying degrees of success. After a lot of debugging, a common experience for us when doing this kind of stuff with any LLM, we were able to get a working hook on the FurboP2pCmdImplTutkV3 function. With this Frida script we could monitor the content of the outbound and inbound communications between the device and mobile application.</p><p>Much of what we saw was quite basic, a command was issued, a confirmation of that command was received, without much data being sent in the payload of the request. This was not true for all commands though. The first device we had purchased for our research was the top of the line Furbo 360, which allowed you to toss treats at your pets which were accompanied with a noise. This noise could be customized in the mobile application to be a recording of anything! This sound could be configured from the device settings page. While hooked, we decided to record our own sound and change the treat toss noise. This resulted in the following command being issued. </p><p>Each recording would result in a request to obtain an S3 pre-signed URL, where the recording would be then uploaded, and finally the link was sent to the Furbo device where it would be retrieved and saved. Now, this was very, very interesting.</p><p>Using another Frida script, we re-hooked the same function but this time wrote it to replace any URLs sent in a command with a URL which we specified. Our hope with this was that we could get an arbitrary file upload to the device.</p><p>And, we were successful! We could have the Furbo 360 make a GET request to our specified URL. </p><h3>SSRF to... Darude Sandstorm?</h3><p>We wanted to better understand how this was working and determine if we could elevate this SSRF into something a bit better. For that we would need to find the binary and the corresponding function which handled the request and saved the output. From our limited review of the binaries within the root filesystem in the previous article, we guessed it would likely be contained within the p2p_manager binary.</p><p>Our guess was right; this was all handled by the tfp2p_cmd_handler_receive_command function within the p2p_manager binary. When the command with the URL was received, no checks were performed on the URL and the device would download the file, unfortunately though it would  be saved as custom.wav. Meaning, we could not use this technique to upload a new firmware file or a reverse shell for execution. The only other hope was that the wav file parser would be written incorrectly, perhaps enabling us to do something like a buffer overflow. However, reviewing the function which handled this yielded no obvious routes to exploitation, the Tomofun development team did an excellent job handling all possibilities for this file—a consistent pain for us across many device functions.</p><p>So, with remote code execution off the table, what were we to do? Well, our binary analysis revealed that while the file would always be named custom.wav, there was no file size limit. This means we could upload length of sound to the device for playing. With that in mind, we decided that we should get the device to play none other than Darude Sandstorm.</p><p>Converting a copy of the song to a wav file format, we hosted it on a Python server and sent the command to the device.</p><h3>Denial of Service — Race Condition</h3><p>When hunting for a path to exploit the wav file upload, we found that the function which handled the playing of sounds was single-threaded. This meant that if we sent multiple requests to issue treat toss sounds we may be able to use up all of the threads, and trigger a Denial of Service.</p><p>Using the previous Frida script as a reference, we modified it to send multiple Treat Toss commands in unison.</p><p>Once we went into the app and selected the treat toss option from the video feed, a distorted sound would play once. Following that, we could no longer play any noises from the device until it had been rebooted. This may be far from the most exciting vulnerability, and not nearly as fun as the previous, but a vulnerability nonetheless.</p><p>And so that concludes part two in this six-part blog series. The knowledge we gained from this section regarding the mobile application's inner workings, specifically as it pertains to the P2P communications proved invaluable to us in the rest of our research. While we were unable to compromise the device through this, directly, we were able to gain a more thorough understanding of its authentication scheme, the traffic we were observing on our network, and we even got our Furbo to play Darude Sandstorm, all in all a win in our books.</p>","contentLength":10986,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nuvk0v/software_secured_hacking_furbo_2_mobile_app_and/"},{"title":"Remote Code Execution and Authentication Bypass in Materialise OrthoView (CVE-2025-23049)","url":"https://outurnate.com/remote-code-execution-and-authentication-bypass-in-materialise-orthoview-cve-2025-23049","date":1759268414,"author":"/u/panicnot42","guid":124,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nuq4j2/remote_code_execution_and_authentication_bypass/"},{"title":"ZeroDay Cloud: The first open-source cloud hacking competition","url":"https://zeroday.cloud/","date":1759258642,"author":"/u/geekydeveloper","guid":125,"unread":true,"content":"<p>Join the world's top researchers in a competition to find zero-day vulnerabilities in core open-source software powering the cloud. Put your skills to the test, win huge prizes from our $4.5M prize pool, and help make the cloud a safer place.</p>","contentLength":242,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nulurn/zeroday_cloud_the_first_opensource_cloud_hacking/"},{"title":"When Audits Fail: Four Critical Pre-Auth Vulnerabilities in TRUfusion Enterprise","url":"https://www.rcesecurity.com/2025/09/when-audits-fail-four-critical-pre-auth-vulnerabilities-in-trufusion-enterprise/","date":1759257102,"author":"/u/MrTuxracer","guid":127,"unread":true,"content":"<p>In early 2025, we encountered a mission-critical software component called <a href=\"https://www.rocketsoftware.com/en-us/products/b2b-supply-chain-integration/trufusion\" target=\"_blank\" rel=\"noreferrer noopener\">TRUfusion Enterprise</a> on the perimeter of one of our customers that is used to transfer highly sensitive data. Since Rocket Software <a href=\"https://www.rocketsoftware.com/en-us/legal/security-practices\" target=\"_blank\" rel=\"noreferrer noopener\">claims</a> that they are undergoing regular audits and also follow secure coding guidelines, we didn’t expect to find much but to our surprise, it took us just two minutes to discover the first totally unsophisticated, but critical pre-auth path traversal vulnerability that already gave us admin rights. What followed next were so many more exploitable vulnerabilities that should have been caught by the vendor’s security standards. All of them are trivial to exploit and don’t need any authentication at all:</p><ul><li><a href=\"https://github.com/MrTuxracer/advisories/blob/master/CVEs/CVE-2025-27222.txt\" data-type=\"link\" data-id=\"https://github.com/MrTuxracer/advisories/blob/master/CVEs/CVE-2025-27222.txt\" target=\"_blank\" rel=\"noreferrer noopener\">CVE-2025-27222</a>: Pre-Auth Path Traversal Allowing to Leak Local server files disclosing sensitive clear-text passwords</li><li><a href=\"https://github.com/MrTuxracer/advisories/blob/master/CVEs/CVE-2025-27223.txt\" target=\"_blank\" rel=\"noreferrer noopener\">CVE-2025-27223</a>: Hard-Coded Cryptographic key allowing to forge session cookies that can be used to entirely bypass authentication</li><li><a href=\"https://github.com/MrTuxracer/advisories/blob/master/CVEs/CVE-2025-27224.txt\" target=\"_blank\" rel=\"noreferrer noopener\">CVE-2025-27224</a>: Pre-Auth Path Traversal and arbitrary file write allowing to remotely execute commands</li><li><a href=\"https://github.com/MrTuxracer/advisories/blob/master/CVEs/CVE-2025-27225.txt\" target=\"_blank\" rel=\"noreferrer noopener\">CVE-2025-27225</a>: Pre-Auth sensitive information disclosure of PII (partner and contact names)</li></ul><p>As of today, the vendor released updates for all affected TRUfusion Enterprise versions to address the vulnerabilities. Review our official <a href=\"https://github.com/MrTuxracer/advisories/tree/master/CVEs\" target=\"_blank\" rel=\"noreferrer noopener\">security advisories</a> for the version details.</p><h2>CVE-2025-27222: Path Traversal FTW Part 1</h2><p>That’s probably one of the easiest bugs of all and must have been caught by any auditor. We’ve opened the starting page of TRUfusion Enterprise, and immediately spotted a request against the endpoint at <code>/trufusionPortal/getCobrandingData</code>. That endpoint is intended to just return some sort of image for the landing page. However, you could simply add path traversal sequences to the  parameter, which can then be used to traverse through the local file system and read out any file readable by the web server’s user. The file’s contents are then returned in base64 encoding. On this way, it was possible to i.e. read out the Apache server’s access logs:</p><p>While reviewing the Apache access logs, we noticed that TRUfusion seems to have plenty of endpoints that accept authentication tokens via GET parameters. While we always recommend customers not to transfer authentication tokens via GET parameters because it always gets stored in log files, this specific case proved that it can lead to a critical security vulnerability. In this case, we could simply use the  at the main  endpoint, and it granted us full administrative access to the UI.</p><h2>CVE-2025-27223: Let’s Bake Some Fresh Cookies!</h2><p>This is actually a bug class that we do not encounter regularly nowadays, just because most applications rely on cryptographically secure libraries to generate session IDs. However, it turns out that TRUfusion Enterprise does things differently. TRUfusion uses two cookies called  and . To generate these, TRUfusion uses the hardcoded static IDEA key  to encrypt the authentication cookie. While this is interesting enough, they only encrypt the user’s (numeric) ID to create the session cookies, which means that the same  is reusable across  TRUfusion instances.</p><p>Here’s a small Java application that can be used to encrypt and decrypt session cookies for any user ID:</p><pre data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import cryptix.provider.cipher.IDEA;\nimport cryptix.provider.key.IDEAKeyGenerator;\nimport cryptix.util.core.Hex;\nimport java.security.Key;\nimport java.security.KeyException;\nimport java.io.UnsupportedEncodingException;\n\npublic class App {\n    private String ideaKey = \"1234567890123456\";\n\n    public String encode(char[] plainArray) {\n        return encode(new String(plainArray));\n    }\n\n    public String encode(String plain) {\n        IDEAKeyGenerator keygen = new IDEAKeyGenerator();\n        IDEA encrypt = new IDEA();\n\n        Key key;\n        try {\n            key = keygen.generateKey(this.ideaKey.getBytes());\n            encrypt.initEncrypt(key);\n        } catch (KeyException e) {\n            e.printStackTrace();\n            return null;\n        }\n\n        if (plain.length() == 0 || plain.length() % encrypt.getInputBlockSize() &gt; 0) {\n            for (int currentPad = plain.length() % encrypt.getInputBlockSize(); currentPad &lt; encrypt\n                    .getInputBlockSize(); currentPad++) {\n                plain = plain + \" \";\n            }\n        }\n        byte[] encrypted = encrypt.update(plain.getBytes());\n        return Hex.toString(encrypted);\n\n    }\n\n    public String decode(String chiffre) {\n        IDEAKeyGenerator keygen = new IDEAKeyGenerator();\n        IDEA decrypt = new IDEA();\n\n        Key key;\n        try {\n            key = keygen.generateKey(this.ideaKey.getBytes());\n            decrypt.initDecrypt(key);\n        } catch (KeyException e) {\n            e.printStackTrace();\n            return null;\n        }\n\n        byte[] decrypted = decrypt.update(Hex.fromString(chiffre));\n        String str1;\n        try {\n            str1 = new String(decrypted, \"ISO_8859-1\");\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n            return null;\n        }\n        String res = str1.trim();\n        return res;\n\n    }\n\n    public void setKey(String key) {\n        this.ideaKey = key;\n    }\n\n    public static void main(String[] args) {\n        if (args.length &gt;= 1 &amp;&amp; args.length &lt;= 2) {\n            try {\n                App chiffre = new App();\n                if (args.length == 2 &amp;&amp; args[1].equalsIgnoreCase(\"decode\")) {\n                    String decrypted = chiffre.decode(args[0]);\n                    System.out.println(decrypted);\n                } else {\n                    String encrypted = chiffre.encode(args[0]);\n                    System.out.println(encrypted);\n                }\n                return;\n            } catch (Throwable t) {\n                t.printStackTrace();\n                return;\n            }\n        }\n        System.out.println(\"Usage: &lt;text&gt; [encode|decode]\");\n    }\n}</pre><p>So the authentication cookie for the user 1 is: FEF2DF1C36FFF2E3, </p><p>for user 2: 94A0D199D8B822AB etc.</p><h2>CVE-2025-27224: Path Traversal FTW Part 2</h2><p>Another endpoint, another pre-auth path traversal vulnerability, but this time in combination with an arbitrary file write. Jackpot. The endpoint at <code>/trufusionPortal/fileupload</code> is a typical file upload endpoint, where you’ll give it the file contents you want to write as GZIP’ed request body – kudos to the <a href=\"https://github.com/portswigger/hackvertor\" target=\"_blank\" rel=\"noreferrer noopener\">Hackvertor BurpSuite extension</a>, which makes the exploitation trivially easy.</p><p>The exciting part is that it uses the  and  parameters to construct the path where the file will be saved on the remote file system. Paired with a path traversal within the  parameter allows writing any file with any content anywhere on the file system, where the web server user has access to. You can simply point it to TRUfusion’s web portal path at <code>/opt/TRUfusion/web/tomcat/webapps/trufusionPortal/jsp/</code>:</p><p>Your fancy shell is afterwards accessible at <code>/trufusionPortal/jsp/1~rcesec.jsp</code>:</p><h2>CVE-2025-27225: Massive PII Disclosure</h2><p>Another easy to catch pre-auth vulnerability affects the endpoint at <code>/trufusionPortal/jsp/internal_admin_contact_login.jsp</code>. This endpoint returns a massive list of PII that contains all the partners that have access to the TRUfusion instance:</p><p>In this blog post, we examined a software solution designed to transfer highly sensitive files: a product that its vendor claims undergoes regular internal and external audits and also follows secure coding guidelines. Ordinarily, these audits should make the discovery of vulnerabilities significantly more challenging, and in most cases, that assumption holds true. However, our findings indicate that in this case, the audits were at least ineffective.</p><p>Another major challenge we encountered was the vulnerability coordination process. Although the vendor operates an <a href=\"https://www.rocketsoftware.com/en-us/legal/rocket-software-vulnerability-disclosure-policy\" target=\"_blank\" rel=\"noreferrer noopener\">unpaid Vulnerability Disclosure Program (VDP)</a>, one might expect them to have a mature and well-defined process for handling security reports. Instead, as reflected in our advisory timelines, the coordination process was marked by repeated back-and-forth communication and several ignored messages.</p><p>This highlights a key takeaway: effective software security requires not just audits, but targeted penetration testing conducted by experienced professionals. At RCE Security, we prioritize delivering actionable zero-day research to help our customers mitigate risk, improve resilience, and stay ahead of evolving cyber threats.</p>","contentLength":8432,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nul6hm/when_audits_fail_four_critical_preauth/"},{"title":"You name it, VMware elevates it (CVE-2025-41244)","url":"https://blog.nviso.eu/2025/09/29/you-name-it-vmware-elevates-it-cve-2025-41244/","date":1759228697,"author":"/u/rkhunter_","guid":132,"unread":true,"content":"<p><strong>The vulnerability impacts both the VMware Tools and VMware Aria Operations.</strong> When successful, exploitation of the local privilege escalation results in unprivileged users achieving code execution in privileged contexts (e.g., ).</p><p>Throughout its incident response engagements, NVISO determined with confidence that <a href=\"https://malpedia.caad.fkie.fraunhofer.de/actor/unc5174\" target=\"_blank\" rel=\"noreferrer noopener\">UNC5174</a> triggered the local privilege escalation. We can however not assess whether this exploit was part of UNC5174’s capabilities or whether the zero-day’s usage was merely accidental due to its trivialness. UNC5174, a Chinese state-sponsored threat actor, has repeatedly been <a href=\"https://cloud.google.com/blog/topics/threat-intelligence/initial-access-brokers-exploit-f5-screenconnect\" target=\"_blank\" rel=\"noreferrer noopener\">linked to initial access operations</a> achieved through public exploitation.</p><p>Organizations relying on the VMware hypervisor commonly employ the VMware Aria Suite to manage their hybrid‑cloud workloads from a single console. Within this VMware Aria Suite, VMware Aria Operations is the component that provides performance insights, automated remediation, and capacity planning for the different hybrid‑cloud workloads. As part of its performance insights, VMware Aria Operations is capable of discovering which services and applications are running in the different virtual machines (VMs), a feature offered through the Service Discovery Management Pack (SDMP).</p><p>The discovery of these services and applications can be achieved in either of two modes:</p><ul><li>The <strong>legacy credential-based service discovery</strong> relies on VMware Aria Operations running metrics collector scripts within the guest VM using a privileged user. In this mode, all the collection logic is managed by VMware Aria Operations and the guest’s VMware Tools merely acts as a proxy for the performed operations.</li><li>The <strong>credential-less service discovery </strong>is a more recent approach where the metrics collection has been implemented within the guest’s VMware Tools itself. In this mode, no credentials are needed as the collection is performed under the already privileged VMware Tools context.</li></ul><p>As part of its discovery, NVISO was able to confirm the privilege escalation affects both modes, with the logic flaw hence being respectively located within VMware Aria Operations (in credential-based mode) and the VMware Tools (in credential-less mode). While VMware Aria Operations is proprietary, the VMware Tools are available as an open-source variant known as VMware’s <a href=\"https://github.com/vmware/open-vm-tools\" target=\"_blank\" rel=\"noreferrer noopener\">open-vm-tools</a>, distributed on most major Linux distributions. The following CVE-2025-41244 analysis is performed on this open-source component.</p><p>Within open-vm-tools’ service discovery feature, the component handling the identification of a service’s version is achieved through the  shell script. As part of its logic, the  shell script has a generic  function. The function takes as argument a regular expression pattern, used to match supported service binaries (e.g., ), and a version command (e.g., ), used to indicate how a matching binary should be invoked to retrieve its version.</p><p>When invoked,  loops , a <a href=\"https://github.com/vmware/open-vm-tools/blob/stable-13.0.0/open-vm-tools/services/plugins/serviceDiscovery/get-versions.sh#L12\" target=\"_blank\" rel=\"noreferrer noopener\">list of all processes with a listening socket</a>. For each process, it checks whether service binary (e.g., ) matches the regular expression and, if so, invokes the supported service’s version command (e.g., ).</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><p>The  function is <a href=\"https://github.com/vmware/open-vm-tools/blob/stable-13.0.0/open-vm-tools/services/plugins/serviceDiscovery/get-versions.sh#L119-L124\" target=\"_blank\" rel=\"noreferrer noopener\">called using several supported patterns and associated version commands</a>. While this functionality works as expected for system binaries (e.g., ), the usage of the broad‑matching  character class (matching non‑whitespace characters) in several of the regex patterns also matches non-system binaries (e.g., ). These non-system binaries are located within directories (e.g., ) which are writable to unprivileged users by design.</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><p>By matching and subsequently executing non-system binaries (<a href=\"https://cwe.mitre.org/data/definitions/426.html\" target=\"_blank\" rel=\"noreferrer noopener\">CWE-426: Untrusted Search Path</a>), the service discovery feature can be abused by unprivileged users through the staging of malicious binaries (e.g., ) which are subsequently elevated for version discovery. As simple as it sounds, you name it, VMware elevates it.</p><p>To abuse this vulnerability, an unprivileged local attacker can stage a malicious binary within any of the broadly-matched regular expression paths. A simple common location, abused in the wild by UNC5174, is . To ensure the malicious binary is picked up by the VMware service discovery, the binary must be run by the unprivileged user (i.e., show up in the process tree) and open at least a (random) listening socket.</p><p>The following bare-bone  proof-of-concept can be used to demonstrate the privilege escalation.</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><p>Once compiled to a matching path (e.g., <code>go build -o /tmp/httpd CVE-2025-41244.go</code>) and executed, the above proof of concept will spawn an elevated root shell as soon as the VMware metrics collection is executed. This process, at least in credential-less mode, has <a href=\"https://web.archive.org/web/20250418170424/https://blogs.vmware.com/management/2020/10/credential-less-service-discovery-with-vrealize-operations.html\" target=\"_blank\" rel=\"noreferrer noopener\">historically been documented to run every 5 minutes</a>.</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><h3>Credential-based Service Discovery </h3><p>When service discovery operates in the legacy credential-based mode, VMware Aria Operations will eventually trigger the privilege escalation once it runs the metrics collector scripts. Following successful exploitation, the unprivileged user will have achieved code execution within the privileged context of the configured credentials. The beneath process tree was obtained by running the  command through the privilege escalation shell, where the entries until line 4 are legitimate and the entries as of line 5 part of the proof-of-concept exploit.</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><h3>Credential-less Service Discovery</h3><p>When service discovery operates in the modern credential-less mode, the VMware Tools will eventually trigger the privilege escalation once it runs the collector plugin. Following successful exploitation, the unprivileged user will have achieved code execution within the privileged VMware Tools user context. The beneath process tree was obtained by running the  command through the privilege escalation shell, where the first entry is legitimate and all subsequent entries (line 3 and beyond) part of the proof-of-concept exploit.</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><p>Successful exploitation of CVE-2025-41244 can easily be detected through the monitoring of uncommon child processes as demonstrated in the above process trees. Being a local privilege escalation, abuse of CVE-2025-41244 is indicative that an adversary has already gained access to the affected device and that several other detection mechanisms have triggered.</p><p>Under certain circumstances, exploitation may forensically be confirmed in legacy credential-based mode through the analysis of lingering metrics collector scripts and outputs under the <code>/tmp/VMware-SDMP-Scripts-{UUID}/</code> folders. While less than ideal, this approach may serve as a last resort in environments without process monitoring on compromised machines. The following redacted metrics collector script was recovered from the <code>/tmp/VMware-SDMP-Scripts-{UUID}/script_-{ID}_0.sh</code> location and mentions the matched non-system service binary on its last line.</p><div data-code-block-pro-font-family=\"Code-Pro-JetBrains-Mono\"><pre tabindex=\"0\"><code></code></pre></div><p>While NVISO identified these vulnerabilities through its UNC5174 <a href=\"https://www.nviso.eu/service/dfir\" target=\"_blank\" rel=\"noreferrer noopener\">incident response engagements</a>, the vulnerabilities’ trivialness and adversary practice of mimicking system binaries (<a href=\"https://attack.mitre.org/techniques/T1036/005/\" target=\"_blank\" rel=\"noreferrer noopener\">T1036.005</a>) do not allow us to determine with confidence whether UNC5174 willfully achieved exploitation.</p><p>The broad practice of mimicking system binaries (e.g., ) highlight the real possibility that several other malware strains have accidentally been benefiting from unintended privilege escalations for years. Furthermore, the ease with which these vulnerabilities could be identified in the open-vm-tools source code make it unlikely that knowledge of the privilege escalations did not predate NVISO’s in-the-wild identification.</p><ul><li>2025-05-19: Forensic artifact anomaly noted during UNC5174 incident response engagement.</li><li>2025-05-21: Forensic artifact anomaly attributed to unknown zero-day vulnerability.</li><li>2025-05-25: Zero day vulnerability identified and reproduced in a lab environment.</li><li>2025-05-27: Responsible disclosure authorized and initiated through Broadcom.</li><li>2025-05-28: Responsible disclosure triaged, investigation started by Broadcom.</li><li>2025-06-18: Embargo extended by Broadcom until no later than October to align release cycles.</li></ul><div><div><p>Maxime Thiebaut Incident Response &amp; Threat Researcher Expert within NVISO CSIRT. He spends most of his time performing defensive research and responding to intrusions. Previously, Maxime worked on the SANS SEC699 course. Besides his coding capabilities, Maxime enjoys reverse engineering samples observed in the wild.</p></div></div>","contentLength":8341,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nu9q24/you_name_it_vmware_elevates_it_cve202541244/"},{"title":"Klopatra: exposing a new Android banking trojan operation with roots in Turkey | Cleafy LABS","url":"https://www.cleafy.com/cleafy-labs/klopatra-exposing-a-new-android-banking-trojan-operation-with-roots-in-turkey","date":1759223499,"author":"/u/f3d_0x0","guid":129,"unread":true,"content":"<p>Klopatra's internal code structure reveals a level of sophistication that sets it apart from most Android malware. Its developers have made <strong>deliberate design choices</strong> to maximize evasion, resilience, and operational effectiveness.</p><h3>The Evasion Engine: Virbox and Native Code</h3><p>The most innovative feature of Klopatra is its <strong>multi-layered approach to evading analysis</strong>. At the heart of this strategy is the integration of , a Chinese commercial software protection solution. While using commercial packers and protectors like VMProtect is standard practice in, its adoption in the mobile landscape, particularly on Android, is still rare. This choice signals a significant escalation, indicating that operators invest financial resources to protect their malicious \"assets.\"&nbsp;&nbsp;</p><p>Adopting Virbox is not a purely technical decision, but a strategic one. It drastically increases the time and expertise required for security researchers to reverse-engineer the malware. Virbox is combined with a firm reliance on native libraries (C/C++ code). Unlike typical Android malware that implements most of its logic in Java/Kotlin, Klopatra shifts its core functionalities to the native layer. This strategy offers two main advantages:&nbsp;&nbsp;</p><ol role=\"list\"><li><strong>Powerful Layer of Protection</strong>: Moving the core functionality into native libraries drastically reduces its visibility to traditional detection tools and analysis frameworks.&nbsp;</li><li> It further integrates robust anti-debugging mechanisms, runtime integrity checks, and emulator detection routines designed to thwart analysis environments and prevent execution under controlled conditions.</li></ol><h3>The RAT Framework: Remote Control and Espionage</h3><p>At its core, Klopatra is a powerful Remote Access Trojan (RAT). It provides operators with <strong>granular, real-time control </strong>over the infected device. This capability is implemented through two main VNC (Virtual Network Computing) features:</p><ul role=\"list\"><li><strong>Standard VNC (start_vnc):</strong> The operator can view and interact with the victim's device screen remotely. The operator sees exactly what the user sees.</li><li> This is the more dangerous mode. When activated, the malware displays a black screen on the victim's device (via the <strong>action_blackscreen command</strong>), making it seem like the phone is off or locked. Behind this screen, the operator has full control and can navigate through apps, enter PINs and passwords, and execute banking transactions without the victim's knowledge.</li></ul><p>The level of control is highly detailed, as demonstrated by the list of C2 commands (see Appendix A). Operators can perform a wide range of actions, including simulating taps at specific coordinates (), system button presses like \"back\" () and \"home\" (), and even executing complex gestures like swipes () and long-presses.</p><h3>The Financial Fraud Module: Overlays and Data Exfiltration</h3><p>In addition to direct device control, Klopatra employs the classic technique of  for <strong>large-scale credential theft</strong>. The malware maintains a list of target financial and cryptocurrency applications. When it detects the user opening one of these applications, Klopatra sends a request to the C2 server.</p><p>The server responds with custom HTML content, which the malware displays as a dialog box over the legitimate app (via the command). This dialog box perfectly mimics the banking app's login screen, tricking users into entering their username and password. These credentials are captured and immediately sent to the C2 server.&nbsp;&nbsp;</p><p>In parallel, Klopatra performs comprehensive data collection. It gathers device information (model, manufacturer, battery level), a list of all installed applications (), and captures sensitive data such as keystrokes and clipboard content. All collected data is structured into a JSON object, Base64-encoded, and sent to the C2, providing operators with a detailed profile of each victim.</p><h3>Self-Preservation and Defense</h3><p>Klopatra is designed to survive on the device for as long as possible. It uses <strong>Accessibility Services privileges</strong> to self-grant additional permissions, programmatically clicking \"Allow\" or \"OK\" buttons in system dialogs. It autonomously navigates to the battery optimization settings (command) to add itself to the exception list, preventing the operating system from terminating its background processes.</p><p>Furthermore, Klopatra adopts active defensive measures. It contains a <strong>hardcoded list of package names </strong>belonging to popular security and AV solutions. If it detects one of these apps installed on the device, it may attempt to uninstall it to eliminate threats to its operation. Finally, it can simulate the \"back\" button press to prevent the user from easily accessing the settings screens where they might attempt to uninstall the malware.</p>","contentLength":4664,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/netsec/comments/1nu8crn/klopatra_exposing_a_new_android_banking_trojan/"}],"tags":["netsec"]}